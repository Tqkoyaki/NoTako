"use strict";(self.webpackChunknotako=self.webpackChunknotako||[]).push([[808],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},h=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,u=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(u,s(s({ref:t},h),{},{components:n})):a.createElement(u,s({ref:t},h))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={id:"page-6",title:"Objects",sidebar_position:6},s=void 0,i={unversionedId:"turing-tako/python-basics/page-6",id:"turing-tako/python-basics/page-6",title:"Objects",description:"So far there have been four basic programming patterns used to design programs. They are sequential code, conditional code (if statement), repetitive code (loops), and the use of store and reuse (functions). For highly complex code, these patterns are not enough. This is where object orientated programming comes in.",source:"@site/docs/turing-tako/python-basics/objects.mdx",sourceDirName:"turing-tako/python-basics",slug:"/turing-tako/python-basics/page-6",permalink:"/NoTako/docs/turing-tako/python-basics/page-6",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/turing-tako/python-basics/objects.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"page-6",title:"Objects",sidebar_position:6},sidebar:"turingSidebar",previous:{title:"Data Handling",permalink:"/NoTako/docs/turing-tako/python-basics/page-5"},next:{title:"Networking",permalink:"/NoTako/docs/turing-tako/python-basics/page-7"}},l={},c=[{value:"Object Orientated Programming",id:"object-orientated-programming",level:2},{value:"Magic Methods",id:"magic-methods",level:2},{value:"Inheritance",id:"inheritance",level:2}],h={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"So far there have been four basic programming patterns used to design programs. They are sequential code, conditional code (if statement), repetitive code (loops), and the use of store and reuse (functions). For highly complex code, these patterns are not enough. This is where object orientated programming comes in."),(0,o.kt)("h2",{id:"object-orientated-programming"},"Object Orientated Programming"),(0,o.kt)("p",null,'A program can be thought of as a collection of objects that interact with each other. Each object is like a "zone" of the program that has well defined inputs and outputs and a set of rules that govern how it interacts with other objects. The benefit of this is that it allows each object to hide its internal complexity from the rest of the program so you can focus on just how to use them instead of how they work.'),(0,o.kt)("p",null,"Python comes with built in classes that we have already used. We didn't care about how they were coded internally because we just cared about how we could use them."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Built-in objects" showLineNumbers',title:'"Built-in','objects"':!0,showLineNumbers:!0},"# Examples of built-in objects\nlist_object = list()\ndict_object = dict()\n")),(0,o.kt)("p",null,"There is code behind the ",(0,o.kt)("inlineCode",{parentName:"p"},"list()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"dict()")," objects that lets them do what they do. For example, we can add values to a list using the ",(0,o.kt)("inlineCode",{parentName:"p"},"append()")," method and there is code behind that method that makes it work but we don't need to know how it works internally to use it. So it lets us focus on the bigger details of our program."),(0,o.kt)("p",null,"You can also create your own objects using classes which are like blueprints for objects. Each object can have a ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"constructor"))," which controls how the object is created. There are also ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"properties"))," which are like variables / data that are specific to the object and finally there are ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"methods"))," which are like functions that are specific to the object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Creating a class" showLineNumbers',title:'"Creating',a:!0,'class"':!0,showLineNumbers:!0},'# The name of the object is Person (everything inside the class defines the object)\nclass Person:\n    # The constructor is a method called when the object is created. You can require certain properties to be passed in at the time of creation.\n    # To access the properties, you need to take self as a parameter and then use self.property_name to access the property.\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    # Methods are like functions that are specific to the object. They can take parameters and return values.\n    def say_hello(self):\n        print("Hello, my name is " + self.name)\n\n# Create a new object using the Person class\n# They have different data held by name and age\nperson_1 = Person("John", 20)\nperson_2 = Person("Jane", 21)\n\n# Call the say_hello method on the objects\nperson_1.say_hello() # Hello, my name is John\nperson_2.say_hello() # Hello, my name is Jane\n\n# Access the properties of the objects\nprint(person_1.name) # John\nprint(person_2.age) # 21\n')),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can use dir(object) to see all the properties and methods of an object.")),(0,o.kt)("h2",{id:"magic-methods"},"Magic Methods"),(0,o.kt)("p",null,"Python have magic methods to make it easier to work with objects like adding functionality where you can add two objects together or compare them. All magic methods start and end with two underscores. For example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__")," method is called when the object is created and the one we will look at is the ",(0,o.kt)("inlineCode",{parentName:"p"},"__del__")," method which is called when the object is deleted."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Magic methods" showLineNumbers',title:'"Magic','methods"':!0,showLineNumbers:!0},'class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def say_hello(self):\n        print("Hello, my name is " + self.name)\n    \n    # This method is called when the object is deleted\n    def __del__(self):\n        print("Goodbye " + self.name)\n\nperson_1 = Person("John", 20)\ndel person_1 # Goodbye John\n')),(0,o.kt)("p",null,"Another useful magic method is ",(0,o.kt)("inlineCode",{parentName:"p"},"__getitem__")," which allows you to access the object like a list and ",(0,o.kt)("inlineCode",{parentName:"p"},"__setitem__")," which allows you to set the value of an item in the object like a list."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Magic methods like lists" showLineNumbers',title:'"Magic',methods:!0,like:!0,'lists"':!0,showLineNumbers:!0},'class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def say_hello(self):\n        print("Hello, my name is " + self.name)\n    \n    # This method is called when you access the object like a list\n    def __getitem__(self, key):\n        if key == 0:\n            return self.name\n        elif key == 1:\n            return self.age\n        else:\n            raise IndexError("Index out of range")\n    \n    # This method is called when you set the value of an item in the object like a list\n    def __setitem__(self, key, value):\n        if key == 0:\n            self.name = value\n        elif key == 1:\n            self.age = value\n        else:\n            raise IndexError("Index out of range")\n\nperson_1 = Person("John", 20)\nprint(person_1[0]) # John\nprint(person_1[1]) # 20\nperson_1[0] = "Jane"\nprint(person_1[0]) # Jane\n')),(0,o.kt)("h2",{id:"inheritance"},"Inheritance"),(0,o.kt)("p",null,"Inheritance is a way to get all the properties and methods from another class. Lets say we have a class called ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal")," that has a ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," property and a ",(0,o.kt)("inlineCode",{parentName:"p"},"make_sound()")," method. We can create a new class called ",(0,o.kt)("inlineCode",{parentName:"p"},"Dog")," that inherits from ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal")," and has all the properties and methods from ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal")," but we can also add new properties and methods to ",(0,o.kt)("inlineCode",{parentName:"p"},"Dog")," that are specific to it. We call the parent class ",(0,o.kt)("inlineCode",{parentName:"p"},"Animal")," the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"superclass"))," and the child class ",(0,o.kt)("inlineCode",{parentName:"p"},"Dog")," the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"subclass")),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Inheritance" showLineNumbers',title:'"Inheritance"',showLineNumbers:!0},'# Parent class\nclass Animal:\n    def __init__(self, name):\n        self.name = name\n    \n    def make_sound(self):\n        print("I am an animal")\n    \n    def __del__(self):\n        print("Goodbye " + self.name)\n\n# Child class\nclass Dog(Animal):\n    def __init__(self, name, breed):\n        super().__init__(name)\n        self.breed = breed\n    \n    def make_sound(self):\n        print("Woof")\n\ndog_1 = Dog("Fido", "Labrador")\n\n# The dog method goes first and if it doesn\'t have a make_sound method, it will call the make_sound method from Animal\ndog_1.make_sound() # Woof\n\n# Even though dog does not have a __del__ method, it still calls the __del__ method from Animal\ndel dog_1 # Goodbye Fido\n')))}d.isMDXComponent=!0}}]);