"use strict";(self.webpackChunknotako=self.webpackChunknotako||[]).push([[944],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=u(r),d=o,h=g["".concat(l,".").concat(d)]||g[d]||c[d]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},231:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(7294);function o(e){return n.createElement("figure",{style:{textAlign:"center"}},n.createElement("img",{src:e.src,alt:e.caption}),n.createElement("figcaption",null,n.createElement("i",null,"Fig. ",e.num," - ",e.caption)))}},3758:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>g});var n=r(7462),o=(r(7294),r(3905)),a=r(231);const i=r.p+"assets/images/comp-7-7a07deb2cdc35bab9e0fc2450caf962f.jpg",s=r.p+"assets/images/comp-8-6b6c4838c48ab393faf9c41499126926.jpeg",l={id:"page-7",title:"Debugging and Testing",sidebar_position:7},u=void 0,p={unversionedId:"turing-tako/intro-to-cs/page-7",id:"turing-tako/intro-to-cs/page-7",title:"Debugging and Testing",description:"As programs get complicated, we stumble upon more and more errors or in programming terms: bugs. It was first coined by U.S. Navy Rear Admiral Grace Hopper when they found a moth inside their computer that caused issues with their calculations.",source:"@site/docs/turing-tako/intro-to-cs/debugging.mdx",sourceDirName:"turing-tako/intro-to-cs",slug:"/turing-tako/intro-to-cs/page-7",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-7",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/turing-tako/intro-to-cs/debugging.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"page-7",title:"Debugging and Testing",sidebar_position:7},sidebar:"turingSidebar",previous:{title:"Recursion and Dictionaries",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-6"},next:{title:"Object Oriented Programming",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-8"}},c={},g=[{value:"Debugging",id:"debugging",level:2},{value:"Logic Errors",id:"logic-errors",level:3},{value:"Methods of Debugging",id:"methods-of-debugging",level:3},{value:"Testing",id:"testing",level:2},{value:"Creating Tests",id:"creating-tests",level:3},{value:"Defensive programming",id:"defensive-programming",level:2},{value:"Assertions",id:"assertions",level:3},{value:"Exceptions",id:"exceptions",level:3}],d={toc:g};function h(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"As programs get complicated, we stumble upon more and more errors or in programming terms: ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"bugs")),". It was first coined by U.S. Navy Rear Admiral Grace Hopper when they found a moth inside their computer that caused issues with their calculations."),(0,o.kt)(a.Z,{src:i,caption:"First Computer Bug",num:1,mdxType:"Fig"}),(0,o.kt)("p",null,"Bugs are always prone to appear in code and as programmers we must have systematic methods to prevent bugs from happening in the first place, test our code for bugs, and find the root of problems when we find them so we can fix and get rid of bugs."),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"There are quite a few techniques that help find errors and that is usually the hardest part. Once the error is location, there is usually an obvious method to fixing the issue. To even find errors, we must be patient and systematic with our approach. There are a good few commonly used practices that make this process easier but they are not set rules. Instead they are guides which all provide a systematic way to approach the error at hand."),(0,o.kt)("p",null,"To begin debugging, we want to start with our complier because when an error occurs, it usually gives good feedback to you usually with the type of error it is, so to become better debuggers, we should understand what some of these errors mean."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Error Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Definition"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"IndexError"),(0,o.kt)("td",{parentName:"tr",align:null},"Access beyond the limits of a list")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TypeError"),(0,o.kt)("td",{parentName:"tr",align:null},"Try to convert to an inappropirate type")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"NameError"),(0,o.kt)("td",{parentName:"tr",align:null},"Referencing a non-existent variable")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"TypeError"),(0,o.kt)("td",{parentName:"tr",align:null},"Mixing data types without appropriate cohesion")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"SyntaxError"),(0,o.kt)("td",{parentName:"tr",align:null},"Forgetting to close paranthesis, quotations, etc.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"ValueError"),(0,o.kt)("td",{parentName:"tr",align:null},"Operand type okay, but value is illegal")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"IOError"),(0,o.kt)("td",{parentName:"tr",align:null},"IO system reports malfunction (e.g. file not found)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"AttributeError"),(0,o.kt)("td",{parentName:"tr",align:null},"Attribute reference fails")))),(0,o.kt)("p",null,"These error messages are sent by the complier and are very useful for locating the bug at hand."),(0,o.kt)("h3",{id:"logic-errors"},"Logic Errors"),(0,o.kt)("p",null,'Typically the errors programmers spend more time debugging are logic errors compared to errors given by the compliers. Errors given by the compliers are nice because it is more obvious your code doesn\'t work because the program stops working and there is an indicator to where the error is due to the error statement provided by the complier. Logic errors are different because your code "works" meaning there are no rules Python has that are broken but the issue is you got an output that you did not expect. It takes quite a bit of time finding out why that is the case and sometimes those errors are not noticed till the program is used immensely more.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Example of Logic Error" showLineNumbers',title:'"Example',of:!0,Logic:!0,'Error"':!0,showLineNumbers:!0},"# Print if the integer is positive or negative.\ndef printPos(int n) {\n    if n > 0:\n        print('Positive')\n    else:\n        print('Negative')\n}\n\n# This program works but what if you give it a zero. \n# Zero is neither negative or positive and this code doesn't catch that\ndef printPos(int n) {\n    if n > 0:\n        print('Positive')\n    elif n < 0:\n        print('Negative')\n    else:\n        print('Zero')\n}\n")),(0,o.kt)("p",null,"The example above is trivial but showcases how there may be values that the programmer may have not considered that could cause the output to be wrong. Larger programs mean there are more lines of code that could cause the unexpected output."),(0,o.kt)("h3",{id:"methods-of-debugging"},"Methods of Debugging"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"print")," statements to test hypothesises and see if variables have the values you want them to have."),(0,o.kt)("li",{parentName:"ol"},"Use the bisection method where you keep printing halfway through the code with the error to narrow down the problem."),(0,o.kt)("li",{parentName:"ol"},"Study the code and ask how the unexpected error was obtained."),(0,o.kt)("li",{parentName:"ol"},"Use the scientific method which means study the data, form hypothesis, repeat experients, and pick the simpliest inputs to test with."),(0,o.kt)("li",{parentName:"ol"},"Draw pictures to better understand the code."),(0,o.kt)("li",{parentName:"ol"},"Take breaks, sometimes a new fresh mind can help solve the issue."),(0,o.kt)("li",{parentName:"ol"},"Use the ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"rubber duck debugging"))," method where you explain your code to a rubber duck or someone who does not understand coding so that you have to explain every bit of your code which helps really think about your own logic and can help you figure out where you logic went wrong.")),(0,o.kt)(a.Z,{src:s,caption:"Rubber Duck Debugging",num:2,mdxType:"Fig"}),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"There can be errors that are sitting latent in your code and to be able to find those errors, you need to test your code often. This is the process of comparing input and output pairs to specifications in order to break the program."),(0,o.kt)("p",null,"There are three levels of testing..."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"Unit Testing"))," are tests for each function and so each piece of the program is tested individually and made sure that it works."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"Regression Testing"))," is the concept of adding tests for bugs that have already been found and fixed to avoid the resurfacing of bugs."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"Integration Testing"))," is a bigger scope test where you are making sure the overall program works.")),(0,o.kt)("h3",{id:"creating-tests"},"Creating Tests"),(0,o.kt)("p",null,"To test code, intuitively you must test all the edge cases of your program and if there are no defined edge cases then the next best solution is random testing with random inputs. Of course with random inputs, the more inputs you try that work indicates that your program has a higher probability of not being buggy."),(0,o.kt)("p",null,"The two types of testing are ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"black box testing"))," and ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"glass box testing")),". Black box testing is where you ignore the underlying code and only thing about the objectives or specification of the program instead of the underlying code. If the code has to turn the screen red when I press a button, that is what we test without worrying about how the code did it. The other type of testing is the glass box testing where you directly test every possible path that the code can take. Code has paths created when you start using control flow structure like loops and conditionals and every possible case of those need to be checked and verified to work properly."),(0,o.kt)("p",null,"You should do a mix of both tests but these are the distinctions we make when creating tests."),(0,o.kt)("h2",{id:"defensive-programming"},"Defensive programming"),(0,o.kt)("p",null,"So far we have looked at how to fix code, but it is also important to figure out ways to code in order to prevent a good handful of bugs from occuring ahead of time. ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Defensive programming"))," cannot help prevent all bugs but can help make it easier to debug later and give you a way to cause less errors."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Defensive programming"))," begins by writing specfications for functions and modularizing programs so that it is easier to debug each seperate section. After that you check conditions on input / ouputs."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"When writing bigger programs, it is vital to break the code down into modular functions because it is easier to debug but you should always backup code as well. This is important because you can compare the working version of a code vs a code that caused the bug which immensely helps with debugging.")),(0,o.kt)("h3",{id:"assertions"},"Assertions"),(0,o.kt)("p",null,"You want to be sure that the assumptions are as expected so you can ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"assert"))," your conditions which verifies that your assumptions are met and if they aren't it raises an ",(0,o.kt)("inlineCode",{parentName:"p"},"AssertionError"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Assertion" showLineNumbers',title:'"Assertion"',showLineNumbers:!0},"# This function expects a non empty list\ndef first_element(arr):\n    # Asserts the list is not empty\n    assert len(arr) != 0, 'The list is empty'\n\n# The error if caused will print \n# AssertionError: The list is empty\n# in the console\n")),(0,o.kt)("p",null,"Assertions ensure that the programmer is only receiving data that they are expecting reducing bugs from bad inputs and bad outputs. You can assert to verify both the input and output are as expected making it easier to find bugs."),(0,o.kt)("h3",{id:"exceptions"},"Exceptions"),(0,o.kt)("p",null,"Besides asserting inputs / outputs, we can also raise ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"exceptions"))," which means we can print out our own errors. The syntax is ",(0,o.kt)("inlineCode",{parentName:"p"},"raise <ExceptionName>(<arguments>)")," where the exception name classifies the type of error and the arguments can accept a string which is a message to be printed along side the error."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Raising Exceptions" showLineNumbers',title:'"Raising','Exceptions"':!0,showLineNumbers:!0},'# Look at types of errors in the table above\nraise ValueError("Something is wrong with the value")\nraise TypeError("Wrong type was given")\n\n# General exception\nraise Exception("General error")\n')),(0,o.kt)("p",null,"Besides raising errors, we can also catch them. Exceptions and assertions currently halt the program but we can catch an exception if we have a way to resolve it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Catching Errors" showLineNumbers',title:'"Catching','Errors"':!0,showLineNumbers:!0},"try:\n    # This is the code that is tried looking for errors\n    grades[1] = 2\nexcept Exception:\n    # This code runs if any error is found in order to fix it\n    # Code continues running after this line\n    grades = [0, 2]\n\n# Typically it is better practice to specify the type of error you are trying to catch\ntry:\n    # Code goes here\nexcept ValueError:\n    # This only catches value errors\nexcept IOError:\n    # You can have as many excepts as you want for a try.\n")),(0,o.kt)("p",null,"These try and catch blocks give you plenty of versatility when it comes to resolving errors. They implement even more functionality through the use of ",(0,o.kt)("inlineCode",{parentName:"p"},"else")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"finally"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Else and Finally" showLineNumbers',title:'"Else',and:!0,'Finally"':!0,showLineNumbers:!0},'try:\n    grades[1] = 2\nexcept:\n    grades = [0, 2]\n# This block only runs if there were no errors found in the try block\nelse:\n    print("No Errors Hooray!")\n\ntry:\n    grades[1] = 2\n    return grades\nexcept:\n    grades = [0, 2]\n    return grades\nfinally:\n    # Even through code after a return should not run, finally runs no matter what\n    # Even if break, continue, or return are used\n    # Useful for cleaning up code\n    print("Returned successfully")\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Assertions and exceptions allow for more control over issues that may break the code and help prevent it ahead of time. Debugging is a long process but with the right tools, solving these problems can be done faster and more effectively.")))}h.isMDXComponent=!0}}]);