"use strict";(self.webpackChunknotako=self.webpackChunknotako||[]).push([[2614],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),h=d(n),u=r,m=h["".concat(l,".").concat(u)]||h[u]||p[u]||i;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9135:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={id:"page-8",title:"Object Oriented Programming",sidebar_position:8},s=void 0,o={unversionedId:"turing-tako/intro-to-cs/page-8",id:"turing-tako/intro-to-cs/page-8",title:"Object Oriented Programming",description:"In object orientated programming, the goal is to break a program into objects.",source:"@site/docs/turing-tako/intro-to-cs/objects.mdx",sourceDirName:"turing-tako/intro-to-cs",slug:"/turing-tako/intro-to-cs/page-8",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-8",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/turing-tako/intro-to-cs/objects.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"page-8",title:"Object Oriented Programming",sidebar_position:8},sidebar:"turingSidebar",previous:{title:"Debugging and Testing",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-7"},next:{title:"Program Efficiency",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-9"}},l={},d=[{value:"Classes",id:"classes",level:2},{value:"Special Methods",id:"special-methods",level:3},{value:"Types",id:"types",level:3},{value:"Getters and Setters",id:"getters-and-setters",level:2},{value:"Inheritance",id:"inheritance",level:2}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In object orientated programming, the goal is to break a program into ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"objects")),"."),(0,r.kt)("p",null,"Objects allow you to bundle data together through ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"attributes"))," and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"methods")),". This follows a divide and conquer type of development where each object is coded seperately and then combined together to create the program. This also builds in modularity and reduces complexity because objects solve smaller parts of the bigger problem and can be used repeatedly. "),(0,r.kt)("h2",{id:"classes"},"Classes"),(0,r.kt)("p",null,"To create an object, we need to first define the objects attributes and functionality. This is done by creating a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"class"))," which is the blueprint of an object. The syntax to create a class is ",(0,r.kt)("inlineCode",{parentName:"p"},"class <name of class>(object)"),"."),(0,r.kt)("p",null,"Let's create a class that represents a ",(0,r.kt)("inlineCode",{parentName:"p"},"Point")," in a 2D axis."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Creating Point" showLineNumbers',title:'"Creating','Point"':!0,showLineNumbers:!0},"class Point(object):\n    # Define the class in here\n    # Everything indented is a part of the class\n")),(0,r.kt)("p",null,"The first thing we want to write is code that should run everytime an object of this type is created. We call the object an ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"instance"))," of the class. THe special method ",(0,r.kt)("inlineCode",{parentName:"p"},"__init__")," is run when a new instance is created and we can use this to initialize data attributes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Point Data Attributes" showLineNumbers {6-10}',title:'"Point',Data:!0,'Attributes"':!0,showLineNumbers:!0,"{6-10}":!0},"class Point(object):\n    # This method runs when a new Point is created.\n    # You always need to take self as a parameter because it refers to the instance.\n    # Other parameters needed to create the object should be specified\n    # For this object, we need a x and y as input\n    def __init__(self, x, y):\n        # This creates data attributes for the instance using self\n        # Self always refers to the instance\n        self.x = x\n        self.y = y\n\n# Creating instances of this object\n# You do not need to provide self\norigin = Point(0, 0)\npoint_1 = Point(3, 1)\npoint_2 = Point(-5, 3)\n")),(0,r.kt)("p",null,"You can access a classes instance variables which are data attributes of a specific instance using the dot notation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Point Data Attributes" showLineNumbers',title:'"Point',Data:!0,'Attributes"':!0,showLineNumbers:!0},"# Creating instances of this object\norigin = Point(0, 0)\npoint_1 = Point(3, 1)\npoint_2 = Point(-5, 3)\n\n# Accessing the instance variables\nprint(origin.x) # Prints 0\nprint(point_1.x) # Prints 3\nprint(point_1.y) # Prints 3\n")),(0,r.kt)("p",null,"Besides data attributes, classes also define methods which build the functionality for a class. We can add a distance method for a ",(0,r.kt)("inlineCode",{parentName:"p"},"Point"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Point Methods" showLineNumbers {6-10}',title:'"Point','Methods"':!0,showLineNumbers:!0,"{6-10}":!0},"class Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    # Each method needs to take self as a parameter\n    def distance(self, other):\n        # You can access data attributes using self\n        x_diff_sq = (self.x - other.x) ** 2 \n        y_diff_sq = (self.y - other.y) ** 2 \n        return (x_diff_sq + y_diff_sq) ** 0.5\n\norigin = Point(0, 0)\np1 = Point(3, 2)\n\n# You use dot notation to access a method\n# You do not give self as a parameter\n# Prints distance between point 1 and origin\nprint(p1.distance(origin))\n")),(0,r.kt)("h3",{id:"special-methods"},"Special Methods"),(0,r.kt)("p",null,"Everything in Python is made up of objects from lists to even adding integers. This is why Python allows for lots more customization on the functionality on how the class works."),(0,r.kt)("p",null,"If we try to currently print our object out, it is uninformative. But we can change the behavior of what is printed if we implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"__str__")," method in our class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Printing Objects" showLineNumbers {12-13}',title:'"Printing','Objects"':!0,showLineNumbers:!0,"{12-13}":!0},"class Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def distance(self, other):\n        x_diff_sq = (self.x - other.x) ** 2 \n        y_diff_sq = (self.y - other.y) ** 2 \n        return (x_diff_sq + y_diff_sq) ** 0.5\n    \n    # You have to return a string for this method\n    def __str__(self):\n        return '(' + str(self.x) + ',' + str(self.y) + ')'\no = Point(0, 0)\n\n# WITHOUT __str__\nprint(o) # Prints something like <__main__.Point object at 0x000001F58C1F0FD0>\n\n# WITH __str__\nprint(o) # Prints (0,0)\n")),(0,r.kt)("p",null,"Besides ",(0,r.kt)("inlineCode",{parentName:"p"},"__str__")," there are many other special methods you can use. A few commonly used ones are..."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Functionality"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__add__(self, other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Override the behavior of the add operator")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__sub__(self, other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Override the behavior of the subtract operator")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__lt__(self, other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Less than functionality")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__le__(self, other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Less than or equal to functionality")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__gt__(self, other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Greater than functionality")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__ge__(self, other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Greater than or equal to functionality")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__eq__(self, other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Equal to functionality")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__ne__(self, other)")),(0,r.kt)("td",{parentName:"tr",align:null},"Not equal to functionality")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__getitem__(self, index)")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows for getting data using brackets like a","[1]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__setitem__(self, index, item)")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows for setting data using brackets like a","[3]"," = 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"__len__(self)")),(0,r.kt)("td",{parentName:"tr",align:null},"Allows the use of ",(0,r.kt)("inlineCode",{parentName:"td"},"len()")," on the object")))),(0,r.kt)("p",null,"Let's see an example of adding points..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Adding Points" showLineNumbers {15-19}',title:'"Adding','Points"':!0,showLineNumbers:!0,"{15-19}":!0},"class Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def distance(self, other):\n        x_diff_sq = (self.x - other.x) ** 2 \n        y_diff_sq = (self.y - other.y) ** 2 \n        return (x_diff_sq + y_diff_sq) ** 0.5\n\n    def __str__(self):\n        return '(' + str(self.x) + ',' + str(self.y) + ')'\n\n    # Other represents the other value you are adding together\n    def __add__(self, other):\n        x = self.x + other.x\n        y = self.y + other.y\n        # Return the result of adding\n        return Point(x, y)\n\np1 = Point(2, 3)\np2 = Point(5, 3)\np3 = p1 + p2\nprint(p3) # Prints (7, 6)\n")),(0,r.kt)("h3",{id:"types"},"Types"),(0,r.kt)("p",null,"As mentioned before, when you are creating a class, you are in a way creating a new data type in Python."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Types" showLineNumbers',title:'"Types"',showLineNumbers:!0},"o = Point(0, 0)\n\n# Prints that its type is a Point\nprint(type(o))\n\n# Prints that its type is a type\nprint(type(Point))\n")),(0,r.kt)("p",null,"To check if an object belongs to a certain class, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"isinstance(object, Class)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Instance Checking" showLineNumbers',title:'"Instance','Checking"':!0,showLineNumbers:!0},"o = Point(0, 0)\np = 1\n\nprint(isinstance(o, Point)) # True\nprint(isinstance(p, Point)) # False\n")),(0,r.kt)("h2",{id:"getters-and-setters"},"Getters and Setters"),(0,r.kt)("p",null,"We create objects to abstract away the complexity. Take the ",(0,r.kt)("inlineCode",{parentName:"p"},"distance")," method for example, to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Point")," class, we do not need to know how these methods were implemented, just how to use the method. We do not need to know how the distance is calculated, just the fact that we can get the distance. This also means that someone could change how the ",(0,r.kt)("inlineCode",{parentName:"p"},"Point")," class works and code that uses the class should still work."),(0,r.kt)("p",null,"To be able to change the implementation without affecting external code, we need to hide all the implementation away from the user. Python does not do this because we can still access attributes like ",(0,r.kt)("inlineCode",{parentName:"p"},"origin.x")," for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Point")," class. Instead we want to use getters and setters which control how to manipulate the attributes. The only way you should be able to access the class is should through methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Getters and Setters" showLineNumbers {12-13,16-17,20-21,24-25}',title:'"Getters',and:!0,'Setters"':!0,showLineNumbers:!0,"{12-13,16-17,20-21,24-25}":!0},"class Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def distance(self, other):\n        x_diff_sq = (self.x - other.x) ** 2 \n        y_diff_sq = (self.y - other.y) ** 2 \n        return (x_diff_sq + y_diff_sq) ** 0.5\n    \n    # Getter for x\n    def get_x(self):\n        return self.x\n    \n    # Getter for y\n    def get_y(self):\n        return self.y\n    \n    # Setter for x\n    def set_x(self, x):\n        self.x = x\n    \n    # Setter for y\n    def set_y(self, y):\n        self.y = y\n\n    def __str__(self):\n        return '(' + str(self.x) + ',' + str(self.y) + ')'\n\n    def __add__(self, other):\n        x = self.x + other.x\n        y = self.y + other.y\n        return Point(x, y)\n\norigin = Point(0, 0)\n\norigin.x # BAD PRACTICE\norigin.get_x() # GOOD PRACTICE\n")),(0,r.kt)("p",null,"These getters and setters give the class more control over how data is manipulated and so it is done to make sure the class is manipulated in the way it is intended."),(0,r.kt)("h2",{id:"inheritance"},"Inheritance"),(0,r.kt)("p",null,"Objects can can have hierarchies through inheritance where objects inherit data and behavior from a different class and add on to it. This reduces redundancy for objects that share similar functionalities."),(0,r.kt)("p",null,"Let's create a new class that represents an Animal to showcase this..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Animal Class" showLineNumbers',title:'"Animal','Class"':!0,showLineNumbers:!0},"class Animal(object):\n    def __init__(self, age):\n        self.age = age\n    \n    def get_age(self):\n        return self.age\n    \n    def set_age(self, age):\n        self.age = age\n    \n    def eat():\n        print('Eating')\n")),(0,r.kt)("p",null,"This is a simple class that creates a representation of an animal. Let's say we want to create a new class called ",(0,r.kt)("inlineCode",{parentName:"p"},"Rabbit"),". This is an animal who should have an age, can eat, and can hop. Instead of creating a class to do all that, we can extend off Animal and add to its functionality."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Rabbit Class" showLineNumbers',title:'"Rabbit','Class"':!0,showLineNumbers:!0},"# The class you are extending from goes inside the parenthesis\nclass Rabbit(Animal):\n    def __init__(self, age):\n        # You can call the __init__ method of the parent class\n        # self needs to be passed in this case\n        Animal.__init__(self, age)\n    \n    def hop():\n        print('Hopping')\n    \n    def eat():\n        print('Munching on a carrot!')\n\ncherry = Rabbit(3)\n\n# You can use all the methods you created the same way\nprint(cherry.hop()) # Prints Hopping\n\n# All methods from a parent class get added to the child class\nprint(cherry.get_age()) # Prints 3\n\n# The child class can override a methods functionality by creating a method with the same name\n# Because the child class has a method called eat, it is used over the one in parent class\nprint(cherry.eat()) # Prints Munching on a carrot!\n")),(0,r.kt)("p",null,"Inheritance can span many classes like for example, if we create a Person class, it can inherit the functionality of the Animal class. But then we can create a Student class that inherits from the Person class and so on. This functionality allows for lower redundancy when coding and provides a lot more flexibility."))}p.isMDXComponent=!0}}]);