"use strict";(self.webpackChunknotako=self.webpackChunknotako||[]).push([[856],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2780:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={id:"page-4",title:"Module System",sidebar_position:4},o=void 0,l={unversionedId:"turing-tako/prog-lang-a/page-4",id:"turing-tako/prog-lang-a/page-4",title:"Module System",description:"So far we have been coding smaller programs in ML but as we start to build larger programs, we need new tools that allow us to organize and manage the complexity of our code. Many programming languages have systems similar to the module system that programmers can use to organize and structure their code.",source:"@site/docs/turing-tako/prog-lang-a/modules.mdx",sourceDirName:"turing-tako/prog-lang-a",slug:"/turing-tako/prog-lang-a/page-4",permalink:"/NoTako/docs/turing-tako/prog-lang-a/page-4",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/turing-tako/prog-lang-a/modules.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"page-4",title:"Module System",sidebar_position:4},sidebar:"turingSidebar",previous:{title:"Functions",permalink:"/NoTako/docs/turing-tako/prog-lang-a/page-3"},next:{title:"Responsibility",permalink:"/NoTako/docs/turing-tako/ethics/page-1"}},s={},p=[{value:"Type Inference",id:"type-inference",level:2},{value:"Polymorphic Types",id:"polymorphic-types",level:3},{value:"Value Restriction",id:"value-restriction",level:3},{value:"Mutual Recursion",id:"mutual-recursion",level:2},{value:"Modules",id:"modules",level:2},{value:"Signatures",id:"signatures",level:3},{value:"Hiding Implementation",id:"hiding-implementation",level:3},{value:"Modules in Action",id:"modules-in-action",level:2},{value:"Abstract Types",id:"abstract-types",level:3},{value:"Signature Matching",id:"signature-matching",level:3},{value:"Module Typing",id:"module-typing",level:3},{value:"Equivalence",id:"equivalence",level:2},{value:"Side-Effect Free Programming",id:"side-effect-free-programming",level:3},{value:"Types of Equivalence",id:"types-of-equivalence",level:3}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"So far we have been coding smaller programs in ML but as we start to build larger programs, we need new tools that allow us to organize and manage the complexity of our code. Many programming languages have systems similar to the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"module system"))," that programmers can use to organize and structure their code."),(0,i.kt)("p",null,"ML also has a type-checking system that is more sophisticated than most other languages which is invaluable to understand when building larger programs. This system is called ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"type inference"))," and it is a powerful tool that allows us to write code without writing down the types of every binding."),(0,i.kt)("h2",{id:"type-inference"},"Type Inference"),(0,i.kt)("p",null,"Similar to Java and C, ML is a ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"statically typed language"))," which means every binding has a type that is determined at complie time i.e. before the program is run. There is a type-checker built into the compiler that only allows programs that use types correctly to compile. By contrast, languages like Racket, Python, and Ruby are ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"dynamically typed languages"))," which means that the type of a binding is determined while the program is running."),(0,i.kt)("p",null,"Even though ML is statically typed like Java and C, it defers from them because ML is ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"implicitly typed"))," meaning programmers rarely need to write down the types of bindings. In languages like Java and C, programmers must write down the types of all bindings and this concept is called ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"explicit typing")),"."),(0,i.kt)("p",null,"Due to the fact that ML is implicitly typed, the type-checker must be more sophisticated as it must infer what the type annotations would have been if the programmer had written all of them down. In principle, type inference and type checking are two seperate processes but in practice, they are often merged together meaning a correct program must find a solution to what all the types should be whenever such a solution exists, else the program is rejected. An overview of ML's type inference is as follows:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The types of bindings are determined in order where the types of earlier bindings are used to determine the types of later ones."),(0,i.kt)("li",{parentName:"ol"},"For each ",(0,i.kt)("inlineCode",{parentName:"li"},"val")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"fun")," binding, the type-checker analyzes the binding to determine necessary facts about its type."),(0,i.kt)("li",{parentName:"ol"},"Afterward, the type-checker uses type variables such as ",(0,i.kt)("inlineCode",{parentName:"li"},"'a"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"'b"),", etc. for any unconstrained types in function arguments or results."),(0,i.kt)("li",{parentName:"ol"},"Enforces the value restriction where only variables and values can be polymorphic types.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="ML Type Inference" showLineNumbers="true"',title:'"ML',Type:!0,'Inference"':!0,showLineNumbers:'"true"'},"fun sum xs =\n    case xs of\n        [] => 0\n      | x::xs' => x + sum xs'\n")),(0,i.kt)("p",null,"We can infer the type of the code above using the following logic:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Looking at the first line, we can determine that ",(0,i.kt)("inlineCode",{parentName:"li"},"f")," must have type ",(0,i.kt)("inlineCode",{parentName:"li"},"T1 -> T2")," for some types ",(0,i.kt)("inlineCode",{parentName:"li"},"T1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"T2")," and the argument ",(0,i.kt)("inlineCode",{parentName:"li"},"xs")," must have type ",(0,i.kt)("inlineCode",{parentName:"li"},"T1"),"."),(0,i.kt)("li",{parentName:"ol"},"Looking at the case-expression, ",(0,i.kt)("inlineCode",{parentName:"li"},"xs")," must have a type compatible with all of the patterns. Since ",(0,i.kt)("inlineCode",{parentName:"li"},"[]")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"x::xs'")," are both patterns for a list, ",(0,i.kt)("inlineCode",{parentName:"li"},"xs")," must have type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 list")," for some type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3"),". Also since ",(0,i.kt)("inlineCode",{parentName:"li"},"xs")," is equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"T1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"T1 = T3 list"),"."),(0,i.kt)("li",{parentName:"ol"},"Looking at the first branch of the case-expression, we are returning ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," which is an integer. Therefore, ",(0,i.kt)("inlineCode",{parentName:"li"},"T2 = int"),"."),(0,i.kt)("li",{parentName:"ol"},"Looking at the second branch of the case-expression, ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"xs'")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 list"),". Since we are adding ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," to the result of ",(0,i.kt)("inlineCode",{parentName:"li"},"sum xs'"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," must be an integer and the result of ",(0,i.kt)("inlineCode",{parentName:"li"},"sum xs'")," must be an integer. Therefore, ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 = int")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"T1 = int list"),"."),(0,i.kt)("li",{parentName:"ol"},"Putting everything together, the type of ",(0,i.kt)("inlineCode",{parentName:"li"},"sum")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"int list -> int"),". This also type-checks because the types are consistently used throughout the function.")),(0,i.kt)("h3",{id:"polymorphic-types"},"Polymorphic Types"),(0,i.kt)("p",null,"ML's type checker is even more sophisticated because it is interwined with ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"parametric polymorphism"))," where the inferencer determines a function's argument or result could be anything. In these cases, the resulting type uses ",(0,i.kt)("inlineCode",{parentName:"p"},"'a"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'b"),", etc. to represent the unknown types. However, it is important to note that type inference and polymorphism are entirely seperate concepts meaning a language can have one or the other. For example, Java has generics which are a form of polymorphism but it does not have type inference as it uses explicit typing."),(0,i.kt)("p",null,"An example of polymorphic types is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Polymorphic Function" showLineNumbers="true"',title:'"Polymorphic','Function"':!0,showLineNumbers:'"true"'},"fun length xs =\n    case xs of\n        [] => 0\n      | x::xs' => 1 + length xs'\n")),(0,i.kt)("p",null,"We can infer the type of the code using the following logic:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The function ",(0,i.kt)("inlineCode",{parentName:"li"},"length")," must have type ",(0,i.kt)("inlineCode",{parentName:"li"},"T1 -> T2")," for some types ",(0,i.kt)("inlineCode",{parentName:"li"},"T1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"T2")," and the argument ",(0,i.kt)("inlineCode",{parentName:"li"},"xs")," must have type ",(0,i.kt)("inlineCode",{parentName:"li"},"T1"),"."),(0,i.kt)("li",{parentName:"ol"},"Due to the patterns in the case expression being ",(0,i.kt)("inlineCode",{parentName:"li"},"[]")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"x::xs'"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"xs")," must have type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 list")," for some type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3"),". Also since ",(0,i.kt)("inlineCode",{parentName:"li"},"xs")," is equal to ",(0,i.kt)("inlineCode",{parentName:"li"},"T1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"T1 = T3 list"),"."),(0,i.kt)("li",{parentName:"ol"},"The first branch returns ",(0,i.kt)("inlineCode",{parentName:"li"},"0")," which means ",(0,i.kt)("inlineCode",{parentName:"li"},"T2 = int"),"."),(0,i.kt)("li",{parentName:"ol"},"In the second branch ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"xs'")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 list"),"."),(0,i.kt)("li",{parentName:"ol"},"The recursive call to ",(0,i.kt)("inlineCode",{parentName:"li"},"length")," in the second branch type checks because ",(0,i.kt)("inlineCode",{parentName:"li"},"xs'")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 list")," which is equal to the argument of ",(0,i.kt)("inlineCode",{parentName:"li"},"length")," which in this case is ",(0,i.kt)("inlineCode",{parentName:"li"},"T1"),". We can also add the results together because ",(0,i.kt)("inlineCode",{parentName:"li"},"T2 = int")," meaning the result of ",(0,i.kt)("inlineCode",{parentName:"li"},"length")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"int"),"."),(0,i.kt)("li",{parentName:"ol"},"The type of ",(0,i.kt)("inlineCode",{parentName:"li"},"length")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 list -> int")," where ",(0,i.kt)("inlineCode",{parentName:"li"},"T3")," is unconstrained. This means the final type of ",(0,i.kt)("inlineCode",{parentName:"li"},"length")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"'a list -> int"),".")),(0,i.kt)("p",null,"Another example of polymorphic types is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Fully Polymorphic Function" showLineNumbers="true"',title:'"Fully',Polymorphic:!0,'Function"':!0,showLineNumbers:'"true"'},"fun compose (f, g) = fn x => f (g x)\n")),(0,i.kt)("p",null,"We can infer the type of the code using the following logic:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The function ",(0,i.kt)("inlineCode",{parentName:"li"},"compose")," must have type ",(0,i.kt)("inlineCode",{parentName:"li"},"T1 * T2 -> T3")," for some types ",(0,i.kt)("inlineCode",{parentName:"li"},"T1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"T2"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"T3"),". Also note that ",(0,i.kt)("inlineCode",{parentName:"li"},"f")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"g")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T2"),"."),(0,i.kt)("li",{parentName:"ol"},"Since ",(0,i.kt)("inlineCode",{parentName:"li"},"compose")," returns a function, ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 = T4 -> T5")," for some types ",(0,i.kt)("inlineCode",{parentName:"li"},"T4")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"T5")," where ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T4")," in the function's body."),(0,i.kt)("li",{parentName:"ol"},"So ",(0,i.kt)("inlineCode",{parentName:"li"},"g")," must have type ",(0,i.kt)("inlineCode",{parentName:"li"},"T4 -> T6")," for some ",(0,i.kt)("inlineCode",{parentName:"li"},"T6")," because it takes ",(0,i.kt)("inlineCode",{parentName:"li"},"x")," as an argument. Also note that because ",(0,i.kt)("inlineCode",{parentName:"li"},"g")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T2"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"T2 = T4 -> T6"),"."),(0,i.kt)("li",{parentName:"ol"},"Since ",(0,i.kt)("inlineCode",{parentName:"li"},"f")," takes the result of ",(0,i.kt)("inlineCode",{parentName:"li"},"g x")," as an argument, ",(0,i.kt)("inlineCode",{parentName:"li"},"f")," must have the type ",(0,i.kt)("inlineCode",{parentName:"li"},"T6 -> T7")," for some ",(0,i.kt)("inlineCode",{parentName:"li"},"T7"),". Also note that because ",(0,i.kt)("inlineCode",{parentName:"li"},"f")," has type ",(0,i.kt)("inlineCode",{parentName:"li"},"T1"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"T1 = T6 -> T7"),"."),(0,i.kt)("li",{parentName:"ol"},"The result of ",(0,i.kt)("inlineCode",{parentName:"li"},"f")," is the result of the function returned by ",(0,i.kt)("inlineCode",{parentName:"li"},"compose")," which means ",(0,i.kt)("inlineCode",{parentName:"li"},"T5 = T7"),"."),(0,i.kt)("li",{parentName:"ol"},"The three facts we know are ",(0,i.kt)("inlineCode",{parentName:"li"},"T1 = T6 -> T5"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"T2 = T4 -> T6"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"T3 = T4 -> T5"),". Putting it all together, the type of ",(0,i.kt)("inlineCode",{parentName:"li"},"compose")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"(T6 -> T5) * (T4 -> T6) -> (T4 -> T5)"),"."),(0,i.kt)("li",{parentName:"ol"},"There is nothing else left to constrain, so if we replace all the types consistently we get ",(0,i.kt)("inlineCode",{parentName:"li"},"('a -> 'b) * ('c -> 'a) -> ('c -> 'b)")," as the final type of ",(0,i.kt)("inlineCode",{parentName:"li"},"compose"),".")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Type inference in ML would have been more difficult if ML had subtyping like if every triple could be a pair because we would not be able to conclude things like ",(0,i.kt)("inlineCode",{parentName:"p"},"T3 = T1 * T2")," since the equals would be overly restrictive. We would instead need constraints indicating that ",(0,i.kt)("inlineCode",{parentName:"p"},"T3")," is a tuple with at least two fields."),(0,i.kt)("p",{parentName:"admonition"},"Type inference in ML would also be more difficult if it did not have parametric polymorphism since we would have to pick some type for functions like ",(0,i.kt)("inlineCode",{parentName:"p"},"length")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"compose")," and that could depend on how they are used. ")),(0,i.kt)("h3",{id:"value-restriction"},"Value Restriction"),(0,i.kt)("p",null,"There is still a problem with the ML type system because it can accept programs that when run could have values of the wrong types, such as putting an ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," where we expect a ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),". This problem results from a combination of polymorphic types and mutable references."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Value Restriction" showLineNumbers="true"',title:'"Value','Restriction"':!0,showLineNumbers:'"true"'},"val r = ref NONE (* 'a option ref *)\nval _ = r := SOME \"hi\" (* instantiate 'a with string *)\nval i = 1 + valOf(!r) (* instantiate 'a with int *)\n")),(0,i.kt)("p",null,"If we use the rules for type checking/inference, we end up adding ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," to ",(0,i.kt)("inlineCode",{parentName:"p"},'"hi"')," even though everything seems to type-check given the types of the functions/operators: ",(0,i.kt)("inlineCode",{parentName:"p"},"ref ('a -> 'a ref)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},":= ('a ref * 'a -> unit)"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"! ('a ref -> 'a)"),". "),(0,i.kt)("p",null,"To fix this issue, we need a stricter type system and ML does this by preventing the first line from having a polymorphic type. In general, ML will give a variable in a val-binding a polymorphic type only if the expression in the val-binding is a value or a variable. This is called a ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"value restriction")),". So, in our example, ",(0,i.kt)("inlineCode",{parentName:"p"},"ref NONE")," is a call to the function ",(0,i.kt)("inlineCode",{parentName:"p"},"ref")," and function calls are not variables or values. So, we get a warning and ",(0,i.kt)("inlineCode",{parentName:"p"},"r")," is given a type ",(0,i.kt)("inlineCode",{parentName:"p"},"?X1 option ref")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"?X1"),' is a "dummy type" and not a type variable.'),(0,i.kt)("h2",{id:"mutual-recursion"},"Mutual Recursion"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Mutual recursion"))," is when two or more functions call each other recursively in their bodies. This concept can be useful but ML's rule that bindings can only use earlier bindings makes it more difficult as we do not know which function should come first. It turns out ML has special support for mutual recursion using the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"and")," which we use to replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"fun")," keyword expect the first ",(0,i.kt)("inlineCode",{parentName:"p"},"fun")," keyword in a sequence of mutually recursive functions. By doing this, all the functions in the sequence are treated as if they were defined at the same time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Mutual Recursion" showLineNumbers="true"',title:'"Mutual','Recursion"':!0,showLineNumbers:'"true"'},"(* True if the list strictly alternates between 1 and 2 and ends with 2 *)\nfun match xs =\n    let fun need_one xs = (* State of 1 *)\n            case xs of\n                [] => true\n            | 1::xs' => need_two xs'\n            | _ => false\n        and need_two xs = (* State of 2 *)\n            case xs of\n                [] => false\n            | 2::xs' => need_one xs'\n            | _ => false\n        in\n            need_one xs\n        end\n")),(0,i.kt)("p",null,"The solution to the problem above like many problems in computer science can be modeled using ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"finite state machines"))," and mutually recursive functions where there is a function for each state. In the example above, the function ",(0,i.kt)("inlineCode",{parentName:"p"},"need_one")," is the state of ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," and the function ",(0,i.kt)("inlineCode",{parentName:"p"},"need_two")," is the state of ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"and")," keyword in ML can also be used to have mutually recursive datatype bindings.")),(0,i.kt)("p",null,"Also note that ",(0,i.kt)("inlineCode",{parentName:"p"},"and")," is nice feature of ML but we can still do mutual recursion even if a language does not have special support for it as long as we can pass functions as arguments to other functions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Mutual Recursion Without Support" showLineNumbers="true"',title:'"Mutual',Recursion:!0,Without:!0,'Support"':!0,showLineNumbers:'"true"'},"fun match xs =\n    let fun need_one xs f = (* State of 1 *)\n            case xs of\n                [] => true\n            | 1::xs' => f xs'\n            | _ => false\n\n        fun need_two xs = (* State of 2 *)\n            case xs of\n                [] => false\n            | 2::xs' => need_one xs' need_two\n            | _ => false\n        in\n            need_one xs need_two\n        end\n")),(0,i.kt)("h2",{id:"modules"},"Modules"),(0,i.kt)("p",null,"ML modules can be used to seperate bindings into different namespaces which is useful for larger programs where we want to organize our code with more structure. In ML, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"structures")," to define ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"modules"))," which are a collection of bindings. "),(0,i.kt)("p",null,"To create a module, we write ",(0,i.kt)("inlineCode",{parentName:"p"},"structure Name = struct bindings end")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"Name")," is the name of the module and ",(0,i.kt)("inlineCode",{parentName:"p"},"bindings")," are the bindings in the module. Outside the structure, we can reference a binding ",(0,i.kt)("inlineCode",{parentName:"p"},"b"),", using ",(0,i.kt)("inlineCode",{parentName:"p"},"Name.b")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"Name")," is the name of the module. Also note, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Name")," of the module is often capitalized as a convention to distinguish it from other bindings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Module Example" showLineNumbers="true',title:'"Module','Example"':!0,showLineNumbers:'"true'},"(* Creating a module *)\nstructure MyMathLib = \n    struct \n    fun fact x =\n        if x = 0\n        then 1\n        else x * fact (x - 1)\n    \n    val half_pi = Math.pi / 2.0\n\n    fun doubler y = y + y\n    end\n\n(* Using bindings in the module *)\nval x = MyMathLib.fact 5\n")),(0,i.kt)("p",null,"Finally, with modules, we have to specify the structures name before we use bindings in the structure. However, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"open")," keyword to make the bindings in a module directly. If we used ",(0,i.kt)("inlineCode",{parentName:"p"},"open MyMathLib")," in the example above, we could use ",(0,i.kt)("inlineCode",{parentName:"p"},"fact 5")," instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"MyMathLib.fact 5"),". A common use of this is to write succinct testing code for a module outside the module itself. Other uses of ",(0,i.kt)("inlineCode",{parentName:"p"},"open")," are often frowned upon as it may introduce unexpected shadowing."),(0,i.kt)("h3",{id:"signatures"},"Signatures"),(0,i.kt)("p",null,"Structures so far are providing just ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"namespace management"))," which is a way to avoid different bindings in different parts of the program from shadowing each other. Namespace management is useful but structures can do so much more when given ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"signatures"))," which essentially provides strict interfaces that code outside the module must obey."),(0,i.kt)("p",null,"When we give a structure a signature, the structure must have all the bindings in the signature and the types of the bindings must match the types in the signature. If the structure does not have all the bindings in the signature or the types do not match, the program will not compile. This is useful because it allows us to enforce a contract between the structure and the rest of the program."),(0,i.kt)("p",null,"So, to create a signature, we write ",(0,i.kt)("inlineCode",{parentName:"p"},"signature Name = sig bindings end")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"Name")," is the name of the signature and ",(0,i.kt)("inlineCode",{parentName:"p"},"bindings")," are the type bindings in the signature. We can then give structure a signature by writing ",(0,i.kt)("inlineCode",{parentName:"p"},"structure StructureName :> SignatureName = ...")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"StructureName")," is the name of the structure and ",(0,i.kt)("inlineCode",{parentName:"p"},"SignatureName")," is the name of the signature."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Signature Example" showLineNumbers="true',title:'"Signature','Example"':!0,showLineNumbers:'"true'},"(* Creating a signature *)\nsignature MathLib =\n    sig\n    val fact : int -> int\n    val half_pi : real\n    val doubler : int -> int\n    end\n\n(* Creating a structure with a signature *)\nstructure MyMathLib :> MathLib = \n    struct \n    fun fact x =\n        if x = 0\n        then 1\n        else x * fact (x - 1)\n    \n    val half_pi = Math.pi / 2.0\n\n    fun doubler y = y + y\n    end\n")),(0,i.kt)("h3",{id:"hiding-implementation"},"Hiding Implementation"),(0,i.kt)("p",null,"A major benefit of using signatures is that we can seperate an interface from an implementation which is fundemental for building correct, robust, and reusable programs. Before we use signatures to hide the implementation of a module, we must first note that we have already been hiding implementation using functions. Functions can implemented in many ways but the client of the function would have no way to tell if we replaced one of the functions with a different one as long as the inputs and outputs are the same."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Hiding Implementation Using Functions" showLineNumbers="true"',title:'"Hiding',Implementation:!0,Using:!0,'Functions"':!0,showLineNumbers:'"true"'},"(* Clients cannot tell if we replace any of these functions with another *)\nfun doubler x = x + x\nfun doubler x = x * 2\nval y = 2\nfun doubler x = x * y\n")),(0,i.kt)("p",null,"We can hide implementation using signatures as well by hiding bindings we do not want the client to see. If the signature does not include a binding that is in the module, then the client cannot use that binding."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Hiding Implementation Using Signatures" showLineNumbers="true"',title:'"Hiding',Implementation:!0,Using:!0,'Signatures"':!0,showLineNumbers:'"true"'},"(* Signature for MyMathLib *)\nsignature MathLib =\n    sig\n    val fact : int -> int\n    val half_pi : real\n    end\n")),(0,i.kt)("p",null,"If we use the signature above for the module ",(0,i.kt)("inlineCode",{parentName:"p"},"MyMathLib"),", the client of the module would not be able to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"doubler")," function because it is not in the signature."),(0,i.kt)("h2",{id:"modules-in-action"},"Modules in Action"),(0,i.kt)("p",null,"When creating a module for a real library, we must consider two things, the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"invariants"))," and the ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"properties")),". The ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"invariants"))," are properties that all the functions in the module both assume to be true and guarantee to keep true. The ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"properties"))," are the properties that the function in the module guarantees to be true for the client of the module. The difference between the two is that the invariants are internal while the properties are externally visible."),(0,i.kt)("p",null,"Lets create a module for a rational number library which intends to prevent denominators of zero, keep fractions in reduced form, and lets clients create, add, or turn fractions into strings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Rational Library" showLineNumbers="true"',title:'"Rational','Library"':!0,showLineNumbers:'"true"'},'(* Signature for Rational *)\nsignature Rational_A =\nsig\n    datatype rational = Whole of int | Frac of int * int\n    exception BadFrac\n    val make_frac : int * int -> rational\n    val add : rational * rational -> rational\n    val toString : rational -> string\nend\n\n(* Structure for Rational *)\nstructure Rational :> Rational_A =\n    struct\n    (*  Invariant 1: all denominators > 0\n        Invariant 2: rationals kept in reduced form, \n            including that a Frac never has a denominator of 1 *)\n        datatype rational = Whole of int | Frac of int * int\n        exception BadFrac\n\n        (* gcd and reduce are helper functions *)\n        (* gcd assumes x and y are non-negative *)\n        fun gcd (x, y) = \n            if x = y\n            then x\n            else if x < y\n            then gcd (x, y - x)\n            else gcd (y, x)\n        \n        fun reduce r =\n            case r of\n                Whole _ => r\n              | Frac (x, y) =>\n                    if x = 0\n                    then Whole 0\n                    else let val d = gcd (abs x, y) in\n                        if d = y\n                        then Whole (x div y)\n                        else Frac (x div d, y div d)\n        \n        (* when making a frac, we ban zero denominators *)\n        fun make_frac (x, y) =\n            if y = 0\n            then raise BadFrac\n            else if y < 0\n            then reduce (Frac (~x, ~y))\n            else reduce (Frac (x, y))\n        \n        (* using math properties assuming invariants are true *)\n        fun add (r1, r2) =\n            case (r1, r2) of\n                (Whole x, Whole y) => Whole (x + y)\n              | (Whole x, Frac (a, b)) => Frac (x * b + a, b)\n              | (Frac (a, b), Whole x) => Frac (x * b + a, b)\n              | (Frac (a, b), Frac (c, d)) => reduce (Frac (a * d + c * b, b * d))\n        \n        (* given invariant, prints in reduced form *)\n        fun toString r =\n            case r of\n                Whole x => Int.toString x\n              | Frac (a, b) => (Int.toString a) ^ "/" ^ (Int.toString b)\n    end\n')),(0,i.kt)("p",null,"This library promises the following properties to the client:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"toString")," always returns a string that represents the fraction in reduced form."),(0,i.kt)("li",{parentName:"ol"},"No code goes into an infinite loop."),(0,i.kt)("li",{parentName:"ol"},"No code divides by zero."),(0,i.kt)("li",{parentName:"ol"},"There are no fractions with denominators of ",(0,i.kt)("span",{parentName:"li",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"0")),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"0"))))),".")),(0,i.kt)("h3",{id:"abstract-types"},"Abstract Types"),(0,i.kt)("p",null,"Currently with the signature that ",(0,i.kt)("inlineCode",{parentName:"p"},"Rational")," uses, the client cam see the ",(0,i.kt)("inlineCode",{parentName:"p"},"rational")," datatype definition and due to this fact, the client can create a ",(0,i.kt)("inlineCode",{parentName:"p"},"rational")," value without using the ",(0,i.kt)("inlineCode",{parentName:"p"},"make_frac")," function. This is a problem because the client could create a ",(0,i.kt)("inlineCode",{parentName:"p"},"rational")," value that does not satisfy the invariants of the module causing the module to break. "),(0,i.kt)("p",null,"To solve this, we want to hide the implementation of the ",(0,i.kt)("inlineCode",{parentName:"p"},"rational")," datatype from the client and only let the client know that ",(0,i.kt)("inlineCode",{parentName:"p"},"rational")," is a type. This concept of ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"abstract types"))," allows us to define operations over a type without revealing the implementation of that type. In ML, we achieve this using type synonyms in the signature which means we use the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," and the name of the type in the signature but do not give the type a definition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Abstract Types" showLineNumbers="true"',title:'"Abstract','Types"':!0,showLineNumbers:'"true"'},"(* New Signature for Rational *)\nsignature Rational_B =\nsig\n    type rational\n    exception BadFrac\n    val make_frac : int * int -> rational\n    val add : rational * rational -> rational\n    val toString : rational -> string\nend\n")),(0,i.kt)("p",null,"We can make this library a bit more sophisticated by allowing the client to still be able to create whole numbers without ",(0,i.kt)("inlineCode",{parentName:"p"},"make_frac")," because it would not break the invariants of the module. We can do this by exposing the ",(0,i.kt)("inlineCode",{parentName:"p"},"Whole")," constructor in the signature but not the ",(0,i.kt)("inlineCode",{parentName:"p"},"Frac")," constructor. This means we do not need to change the structure at all while only exposing part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"datatype")," in the signature."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Abstract Types with Exposed Constructors" showLineNumbers="true"',title:'"Abstract',Types:!0,with:!0,Exposed:!0,'Constructors"':!0,showLineNumbers:'"true"'},"(* New Signature for Rational *)\nsignature Rational_C =\nsig\n    type rational\n    exception BadFrac\n    val make_frac : int * int -> rational\n    val add : rational * rational -> rational\n    val toString : rational -> string\n    val Whole : int -> rational\nend\n")),(0,i.kt)("h3",{id:"signature-matching"},"Signature Matching"),(0,i.kt)("p",null,"So far, we know informally that the structure ",(0,i.kt)("inlineCode",{parentName:"p"},"Rational")," satisfies all the various signatures in the examples above. However, we need more formal rules to determine if a structure satisfies a signature. Given a structure ",(0,i.kt)("inlineCode",{parentName:"p"},"Struct")," and a signature ",(0,i.kt)("inlineCode",{parentName:"p"},"Sig")," we say that ",(0,i.kt)("inlineCode",{parentName:"p"},"Struct")," matches ",(0,i.kt)("inlineCode",{parentName:"p"},"Sig")," if:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"For every val-binding in ",(0,i.kt)("inlineCode",{parentName:"li"},"Sig"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Struct")," must have a binding with that type or a more general type i.e. an implementation can be polymorphic even if the signature is not. This binding could be provided via a val-binding, a fun-binding, or a datatype-binding."),(0,i.kt)("li",{parentName:"ol"},"For every non-abstract type-binding in ",(0,i.kt)("inlineCode",{parentName:"li"},"Sig"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Struct")," must have a type-binding with the same name."),(0,i.kt)("li",{parentName:"ol"},"For every abstract type-binding in ",(0,i.kt)("inlineCode",{parentName:"li"},"Sig"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Struct")," must have some binding that creates that type (either a datatype-binding or a type-binding).")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Notice that ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," can have any additional bindings that are not in the signature.")),(0,i.kt)("h3",{id:"module-typing"},"Module Typing"),(0,i.kt)("p",null,"We can define multiple different structures with the same signature but that does not mean that the bindings from different structures can be used with each other. For example, lets say we have two structures ",(0,i.kt)("inlineCode",{parentName:"p"},"RationalA")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RationalB")," that are defined the same way as our ",(0,i.kt)("inlineCode",{parentName:"p"},"Rational")," structure. We could try ",(0,i.kt)("inlineCode",{parentName:"p"},"RationalA.toString (RationalB.Whole 5)")," but this would not type-check because ",(0,i.kt)("inlineCode",{parentName:"p"},"RationalA")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RationalB")," are different structures and so their types are different."),(0,i.kt)("h2",{id:"equivalence"},"Equivalence"),(0,i.kt)("p",null,"The idea that one piece of code is equivalent to another piece of code is fundemental to programming and computer science. We think of this idea informally in many situations:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Code Maintenance: Can you simplify, clean up, or reorganize code without changing how the rest of the program behaves?"),(0,i.kt)("li",{parentName:"ol"},"Backward Compatibility: Can you add new features without changing how any of the existing features work?"),(0,i.kt)("li",{parentName:"ol"},"Optimization: Can you replace code with a faster or more space-efficient implementation?"),(0,i.kt)("li",{parentName:"ol"},"Abstraction: Can an external client tell if I make this change to my code?")),(0,i.kt)("p",null,"We have a general idea of what equivalent code means but we need a more formal definition to be able to reason about it. To be more precise, we need that the two functions when given the same argument in the same environment:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Produce the same result (if they produce a result)."),(0,i.kt)("li",{parentName:"ol"},"Have the same (non)termination behavior i.e. if one runs forever, the other must run forever."),(0,i.kt)("li",{parentName:"ol"},"Mutate the same (visible-to-clients) memory in the same way."),(0,i.kt)("li",{parentName:"ol"},"Do the same input/output."),(0,i.kt)("li",{parentName:"ol"},"Raise the same exceptions.")),(0,i.kt)("p",null,"If all these requirements are met, we could replace one function with the other anywhere in the program and the program would still behave the same. This is the concept of ",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"equivalence"))," and it is a very powerful concept in programming."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This also works with structures if every binding in the structure is equivalent to the corresponding binding in the signature. This is useful because it allows us to replace one structure with another as long as they have the same signature.")),(0,i.kt)("h3",{id:"side-effect-free-programming"},"Side-Effect Free Programming"),(0,i.kt)("p",null,'Side effects in programming include mutating references, doing input/output, and more. These can make it difficult to reason about equivalence because the same function can have side-effects that are hard to reason. A solution to this is to avoid side-effects completely and that is exactly what functional languages like ML encourage. In ML, you can have a function body with mutation but this is generally bad-style. If you "stay functional" by not doing mutation, printing, etc. in function bodies as a matter of policy, then callers can assume lots of equivalences they cannot otherwise.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sml",metastring:'title="Side-Effect" showLineNumbers="true"',title:'"Side-Effect"',showLineNumbers:'"true"'},'(* Bad Style *)\nfun badStyle1 x =\n    let val r = ref 0 in\n        r := x;\n        !r\n    end\n\nfun badstyle2 x = (print "Hello"; x)\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"When we are using functions passed as arguments, we cannot assume that the function is side-effect free. The function could be a function that mutates a reference or does input/output. This is something we need to consider when reasoning about equivalence in ML.")),(0,i.kt)("h3",{id:"types-of-equivalence"},"Types of Equivalence"),(0,i.kt)("p",null,"Our current definition of equivalence ignores how much time or space a function takes to evaluate. This means two functions that equivalent even if one takes a nanosecond to complete and the other takes a year. This is still a good definition as we can replace the year function with the nanosecond function and the program would still behave the same. However, this definition is just a tool and we have other definitions of equivalence that are useful in different situations."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"Observational Equivalence")),": Our current definition of equivalence is a form of observational equivalence where we only care about the inputs and outputs of the function."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"Asymptotic Complexity Equivalence")),': This definition of equivalence ignores "constant-factor overheads" and figures out how fast one algorithm is from another. By ignoring the constant factors, it treats two algorithms that are do the same thing in "about the same time" as equivalent.'),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("em",{parentName:"strong"},"Performance Equivalence")),": This definition of equivalence is the most strict as it requires that two functions take the same amount of time and space to evaluate. This is useful when we need to know exactly how long a function will take to run.")))}m.isMDXComponent=!0}}]);