"use strict";(self.webpackChunknotako=self.webpackChunknotako||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"subjectSidebar":[{"type":"link","label":"Welcome","href":"/NoTako/docs/","docId":"intro"},{"type":"link","label":"Computer Science","href":"/NoTako/docs/turing-tako/","docId":"turing-tako/turing"},{"type":"link","label":"Mathematics","href":"/NoTako/docs/euler-tako/","docId":"euler-tako/euler"}],"turingSidebar":[{"type":"link","label":"Computer Science","href":"/NoTako/docs/turing-tako/","docId":"turing-tako/turing"},{"type":"category","label":"Python Basics","items":[{"type":"link","label":"Introduction","href":"/NoTako/docs/turing-tako/python-basics/page-1","docId":"turing-tako/python-basics/page-1"},{"type":"link","label":"Data","href":"/NoTako/docs/turing-tako/python-basics/page-2","docId":"turing-tako/python-basics/page-2"},{"type":"link","label":"Sequences","href":"/NoTako/docs/turing-tako/python-basics/page-3","docId":"turing-tako/python-basics/page-3"},{"type":"link","label":"Control Flow","href":"/NoTako/docs/turing-tako/python-basics/page-4","docId":"turing-tako/python-basics/page-4"},{"type":"link","label":"Data Handling","href":"/NoTako/docs/turing-tako/python-basics/page-5","docId":"turing-tako/python-basics/page-5"},{"type":"link","label":"Objects","href":"/NoTako/docs/turing-tako/python-basics/page-6","docId":"turing-tako/python-basics/page-6"},{"type":"link","label":"Networking","href":"/NoTako/docs/turing-tako/python-basics/page-7","docId":"turing-tako/python-basics/page-7"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Intro to Computer Science","items":[{"type":"link","label":"Introduction to Computation","href":"/NoTako/docs/turing-tako/intro-to-cs/page-1","docId":"turing-tako/intro-to-cs/page-1"},{"type":"link","label":"Branching and Iteration","href":"/NoTako/docs/turing-tako/intro-to-cs/page-2","docId":"turing-tako/intro-to-cs/page-2"},{"type":"link","label":"Strings and Algorithms","href":"/NoTako/docs/turing-tako/intro-to-cs/page-3","docId":"turing-tako/intro-to-cs/page-3"},{"type":"link","label":"Functions","href":"/NoTako/docs/turing-tako/intro-to-cs/page-4","docId":"turing-tako/intro-to-cs/page-4"},{"type":"link","label":"Tuples and Lists","href":"/NoTako/docs/turing-tako/intro-to-cs/page-5","docId":"turing-tako/intro-to-cs/page-5"},{"type":"link","label":"Recursion and Dictionaries","href":"/NoTako/docs/turing-tako/intro-to-cs/page-6","docId":"turing-tako/intro-to-cs/page-6"},{"type":"link","label":"Debugging and Testing","href":"/NoTako/docs/turing-tako/intro-to-cs/page-7","docId":"turing-tako/intro-to-cs/page-7"},{"type":"link","label":"Object Oriented Programming","href":"/NoTako/docs/turing-tako/intro-to-cs/page-8","docId":"turing-tako/intro-to-cs/page-8"},{"type":"link","label":"Program Efficiency","href":"/NoTako/docs/turing-tako/intro-to-cs/page-9","docId":"turing-tako/intro-to-cs/page-9"},{"type":"link","label":"Searching and Sorting","href":"/NoTako/docs/turing-tako/intro-to-cs/page-10","docId":"turing-tako/intro-to-cs/page-10"}],"collapsed":true,"collapsible":true},{"type":"category","label":"How to Code: Simple Data","items":[{"type":"link","label":"Beginner Student Language","href":"/NoTako/docs/turing-tako/simple-data/page-1","docId":"turing-tako/simple-data/page-1"},{"type":"link","label":"How to Design Functions","href":"/NoTako/docs/turing-tako/simple-data/page-2","docId":"turing-tako/simple-data/page-2"},{"type":"link","label":"How to Design Data","href":"/NoTako/docs/turing-tako/simple-data/page-3","docId":"turing-tako/simple-data/page-3"},{"type":"link","label":"How to Design Worlds","href":"/NoTako/docs/turing-tako/simple-data/page-4","docId":"turing-tako/simple-data/page-4"},{"type":"link","label":"Compound Data","href":"/NoTako/docs/turing-tako/simple-data/page-5","docId":"turing-tako/simple-data/page-5"},{"type":"link","label":"Self Reference","href":"/NoTako/docs/turing-tako/simple-data/page-6","docId":"turing-tako/simple-data/page-6"},{"type":"link","label":"Reference","href":"/NoTako/docs/turing-tako/simple-data/page-7","docId":"turing-tako/simple-data/page-7"},{"type":"link","label":"Natural Numbers","href":"/NoTako/docs/turing-tako/simple-data/page-8","docId":"turing-tako/simple-data/page-8"},{"type":"link","label":"Helper Functions","href":"/NoTako/docs/turing-tako/simple-data/page-9","docId":"turing-tako/simple-data/page-9"},{"type":"link","label":"Binary Search Tree","href":"/NoTako/docs/turing-tako/simple-data/page-10","docId":"turing-tako/simple-data/page-10"}],"collapsed":true,"collapsible":true},{"type":"category","label":"How to Code: Complex Data","items":[{"type":"link","label":"Mutual Reference","href":"/NoTako/docs/turing-tako/complex-data/page-1","docId":"turing-tako/complex-data/page-1"},{"type":"link","label":"Cross Product Table","href":"/NoTako/docs/turing-tako/complex-data/page-2","docId":"turing-tako/complex-data/page-2"},{"type":"link","label":"Encapsulation","href":"/NoTako/docs/turing-tako/complex-data/page-3","docId":"turing-tako/complex-data/page-3"},{"type":"link","label":"Abstraction","href":"/NoTako/docs/turing-tako/complex-data/page-4","docId":"turing-tako/complex-data/page-4"},{"type":"link","label":"Generative Recursion","href":"/NoTako/docs/turing-tako/complex-data/page-5","docId":"turing-tako/complex-data/page-5"},{"type":"link","label":"Search","href":"/NoTako/docs/turing-tako/complex-data/page-6","docId":"turing-tako/complex-data/page-6"},{"type":"link","label":"Accumulators","href":"/NoTako/docs/turing-tako/complex-data/page-7","docId":"turing-tako/complex-data/page-7"},{"type":"link","label":"Graphs","href":"/NoTako/docs/turing-tako/complex-data/page-8","docId":"turing-tako/complex-data/page-8"}],"collapsed":true,"collapsible":true}],"eulerSidebar":[{"type":"link","label":"Mathematics","href":"/NoTako/docs/euler-tako/","docId":"euler-tako/euler"},{"type":"category","label":"Mathematical Thinking","items":[{"type":"link","label":"Introduction","href":"/NoTako/docs/euler-tako/math-thinking/page-1","docId":"euler-tako/math-thinking/page-1"},{"type":"link","label":"Logical Language","href":"/NoTako/docs/euler-tako/math-thinking/page-2","docId":"euler-tako/math-thinking/page-2"}],"collapsed":true,"collapsible":true}]},"docs":{"euler-tako/euler":{"id":"euler-tako/euler","title":"Mathematics","description":"WORK IN PROGRESS...","sidebar":"eulerSidebar"},"euler-tako/math-thinking/page-1":{"id":"euler-tako/math-thinking/page-1","title":"Introduction","description":"Mathematics is much more than just using procedures to solve problems. Modern mathematics has required deeper and deeper levels of understanding which is only achievable through mathematical thinking.","sidebar":"eulerSidebar"},"euler-tako/math-thinking/page-2":{"id":"euler-tako/math-thinking/page-2","title":"Logical Language","description":"As previously stated, mathematics requires precise language and so the language is restricted. To better understand how to read and write in this form of language, we need to continue to evolve our knowledge of it\'s components.","sidebar":"eulerSidebar"},"intro":{"id":"intro","title":"Welcome","description":"The sections here are divided into different topics with the intention to cover a vast amount of knowledge. Currently there is computer science with the intention of gaining knowledge in more STEM related subjects.","sidebar":"subjectSidebar"},"turing-tako/complex-data/page-1":{"id":"turing-tako/complex-data/page-1","title":"Mutual Reference","description":"As data gets more complex, we need better data structures to store and use it. So far we have worked with lists and then built up to binary trees. Binary trees can be as arbitrary in depth as possible but they can only have two children maximum per node. Arbitrary arity tree is an evolution to binary trees where each node can have as many children so the tree has arbitrary size in depth and width.","sidebar":"turingSidebar"},"turing-tako/complex-data/page-2":{"id":"turing-tako/complex-data/page-2","title":"Cross Product Table","description":"Typically before coding, it is often helpful to create a model which is more abstract and often a non-code representation of the function we are coding. Being able to simplify and design the code at a model level is a valuable skill to have.","sidebar":"turingSidebar"},"turing-tako/complex-data/page-3":{"id":"turing-tako/complex-data/page-3","title":"Encapsulation","description":"Encapsulation is a fundemental concept in software engineering because typically software is built by many people. The issue with multiple people coding one large software system is that it is very likely that they are going to want to use the same function names for two different functions. This is problem we will be able to solve using encapsulation.","sidebar":"turingSidebar"},"turing-tako/complex-data/page-4":{"id":"turing-tako/complex-data/page-4","title":"Abstraction","description":"Another technique commonly used in programming is abstraction, which is a technique that allows us to remove many pieces of repetitive code and refactoring out the identical parts. This kind of ability is useful for managing complexity in programs by making programs smaller.","sidebar":"turingSidebar"},"turing-tako/complex-data/page-5":{"id":"turing-tako/complex-data/page-5","title":"Generative Recursion","description":"So far we have worked with structural recursion which is where each recursive call is made using a subset of the original data. This means the subset will eventually reach the base case. On the other hand, we will look at a new type of recursion called generative recursion which makes a recursive call made on data that was computed from the original data.","sidebar":"turingSidebar"},"turing-tako/complex-data/page-6":{"id":"turing-tako/complex-data/page-6","title":"Search","description":"","sidebar":"turingSidebar"},"turing-tako/complex-data/page-7":{"id":"turing-tako/complex-data/page-7","title":"Accumulators","description":"","sidebar":"turingSidebar"},"turing-tako/complex-data/page-8":{"id":"turing-tako/complex-data/page-8","title":"Graphs","description":"","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-1":{"id":"turing-tako/intro-to-cs/page-1","title":"Introduction to Computation","description":"Computers are powerful tools that have allowed us to do things that were previously impossible but they can only do what we tell them to do. There are two types of knowledge, declarative and imperative. Declarative knowledge is a statement of facts like square root of a number x is y such that y \\\\* y = x. However a computer cannot understand this statement, it can only understand instructions (how-to) which is called imperative knowledge. You can give a computer a list of instructions to find the square root of a number, it will not understand the results but it will be able to find the square root of a number with the right instructions.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-10":{"id":"turing-tako/intro-to-cs/page-10","title":"Searching and Sorting","description":"There are many times one needs to sort collections and search them as well. The collections we may run these algorithms on may be huge and we need to make sure we pick efficient solution to problems.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-2":{"id":"turing-tako/intro-to-cs/page-2","title":"Branching and Iteration","description":"A computer executes a program line by line from top to bottom. However, there are times when we want to execute a block of code multiple times or skip a block of code. This is where branching and iteration come in.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-3":{"id":"turing-tako/intro-to-cs/page-3","title":"Strings and Algorithms","description":"Some ways we have worked with strings include concatenation and repeating strings using multiplication. There are other ways to work with strings that we will explore in this section because being able to work with strings is a very important skill for a programmer.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-4":{"id":"turing-tako/intro-to-cs/page-4","title":"Functions","description":"As programs get larger, they become more difficult to understand and maintain. In computer science, we take two approaches to break down complex programs into smaller, more manageable pieces.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-5":{"id":"turing-tako/intro-to-cs/page-5","title":"Tuples and Lists","description":"Typically we want to hold more than one data in a variable like a sequence of numbers or names. To be able to do that we need to use tuples or lists. Both hold a sequence of data but they treat the data differently.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-6":{"id":"turing-tako/intro-to-cs/page-6","title":"Recursion and Dictionaries","description":"Looping with for loops and while loops are iterative however, there are other ways to repeat items which could end up simplifying code even further. We call this other method recursion. Our lists and tuples are great ways to store large amounts of data however there are also more flexible options like dictionaries which may be better for some use cases.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-7":{"id":"turing-tako/intro-to-cs/page-7","title":"Debugging and Testing","description":"As programs get complicated, we stumble upon more and more errors or in programming terms: bugs. It was first coined by U.S. Navy Rear Admiral Grace Hopper when they found a moth inside their computer that caused issues with their calculations.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-8":{"id":"turing-tako/intro-to-cs/page-8","title":"Object Oriented Programming","description":"In object orientated programming, the goal is to break a program into objects.","sidebar":"turingSidebar"},"turing-tako/intro-to-cs/page-9":{"id":"turing-tako/intro-to-cs/page-9","title":"Program Efficiency","description":"Even though computers are getting faster every day, efficiency still plays a major factor because datasets that our programs run are growing just as fast. Simple solutions may not scale with large datasets which means the program could take extremely long to run.","sidebar":"turingSidebar"},"turing-tako/python-basics/page-1":{"id":"turing-tako/python-basics/page-1","title":"Introduction","description":"Programming is the process of implementing logic to create a program which usually solves a problem. It is a useful skill because we are able to automate repetitive and mundane tasks and focus on the more important tasks which require human intelligence.","sidebar":"turingSidebar"},"turing-tako/python-basics/page-2":{"id":"turing-tako/python-basics/page-2","title":"Data","description":"A fundamental aspect of programming is working with data and manipulating it to produce a desired result. In this section, we will look at the different types of data that can be used in a program and how to manipulate it.","sidebar":"turingSidebar"},"turing-tako/python-basics/page-3":{"id":"turing-tako/python-basics/page-3","title":"Sequences","description":"Sometimes you want to store a list of values that are related to each other and creating a variable for each one would be excessive, inefficient, and will never be flexible for many needs. This is why we have data structures to organize more complex data and the first example of a data structure is a list. A list holds a sequence of values.","sidebar":"turingSidebar"},"turing-tako/python-basics/page-4":{"id":"turing-tako/python-basics/page-4","title":"Control Flow","description":"Sometimes running a program in order from top to bottom is not the best way to go about writing a program. We want to be able to decide what code runs under specific conditions, we want to be able to repeat code so that we don\'t have to write it over and over again. All of these issues are solved by implementing control flow. Control flow are different ways we can control how our program runs allowing us to deviate from the normal top to bottom execution.","sidebar":"turingSidebar"},"turing-tako/python-basics/page-5":{"id":"turing-tako/python-basics/page-5","title":"Data Handling","description":"A big part of programming is dealing with data and data can get very complex very quickly. There are many different ways to organize and deal with data. So far lists are the only data structure we have seen but there are many more and they all have their own strengths and weaknesses.","sidebar":"turingSidebar"},"turing-tako/python-basics/page-6":{"id":"turing-tako/python-basics/page-6","title":"Objects","description":"So far there have been four basic programming patterns used to design programs. They are sequential code, conditional code (if statement), repetitive code (loops), and the use of store and reuse (functions). For highly complex code, these patterns are not enough. This is where object orientated programming comes in.","sidebar":"turingSidebar"},"turing-tako/python-basics/page-7":{"id":"turing-tako/python-basics/page-7","title":"Networking","description":"There is a limit to how much data we can get on our own and there is lots of data that can be found online for programs to use. Data can come in many forms and can be used for many different purposes.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-1":{"id":"turing-tako/simple-data/page-1","title":"Beginner Student Language","description":"The Beginner Student Language (BSL) is a small and simple programming language which forms the core of nearly every other language you will ever use. It is built on top of racket but the design method using BSL can be adapted to fit any other programming language.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-10":{"id":"turing-tako/simple-data/page-10","title":"Binary Search Tree","description":"As programmers one of our goals is to write code that is efficient. We want our code to run fast and use as little memory as possible. One way to do this is to use a data structures. In this case, we can use a binary search tree to search for a value faster.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-2":{"id":"turing-tako/simple-data/page-2","title":"How to Design Functions","description":"The how to design functions is a design method built to help with systematic design of functions. With well defined functions using this recipe, it eases the process of solving more complex problems.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-3":{"id":"turing-tako/simple-data/page-3","title":"How to Design Data","description":"The how to design data is a driving element in many design recipes because many problems involve the manipulation of data. A data definition\'s purpose is to establish the relationship between the information the program needs and the data itself.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-4":{"id":"turing-tako/simple-data/page-4","title":"How to Design Worlds","description":"So far the programs we have built have been simple non-interactive programs. However, by using the How to Design Worlds recipe which builts upon the last two recipes, we will be able to built large and complex programs which are interactive.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-5":{"id":"turing-tako/simple-data/page-5","title":"Compound Data","description":"There are many times when two pieces of data are related to each other. For example, a person\'s name and their age. We can store these two pieces of data in a single variable using a struct in racket.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-6":{"id":"turing-tako/simple-data/page-6","title":"Self Reference","description":"So far we have worked with variables that hold singular values but there are many situations where being able to store an arbitrary number of values would be useful. One example is being able to store a list of hockey players.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-7":{"id":"turing-tako/simple-data/page-7","title":"Reference","description":"Previously, we worked with self reference where we referenced the function inside of itself. This came in handy when working with lists. For complex data definitions, references just as useful.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-8":{"id":"turing-tako/simple-data/page-8","title":"Natural Numbers","description":"Natural numbers are a valuable data type that we use often in our programs so it is valuable to create a template for them.","sidebar":"turingSidebar"},"turing-tako/simple-data/page-9":{"id":"turing-tako/simple-data/page-9","title":"Helper Functions","description":"Functions have been getting more and more complex as we go along. A simple way to work with complexity is to break down the problem into smaller pieces. This is where helper functions come in, they help us break down problems into smaller more managable ones that we can solve and then put together to solve the bigger problem.","sidebar":"turingSidebar"},"turing-tako/turing":{"id":"turing-tako/turing","title":"Computer Science","description":"According to Wikipedia, Computer Science is the study of computation, automation, and information. The ability to be able to use a machine to compute sophisticated problems has advanced mankind\'s knowledge in many folds. We interact with computing devices every with devices like our computers and phones. Everything is sending and relaying information between each other making it a lot more accessible.","sidebar":"turingSidebar"}}}')}}]);