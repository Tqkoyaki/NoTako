"use strict";(self.webpackChunknotako=self.webpackChunknotako||[]).push([[657],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},231:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294);function r(e){return a.createElement("figure",{style:{textAlign:"center"}},a.createElement("img",{src:e.src,alt:e.caption}),a.createElement("figcaption",null,a.createElement("i",null,"Fig. ",e.num," - ",e.caption)))}},9395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>k,frontMatter:()=>u,metadata:()=>m,toc:()=>g});var a=n(7462),r=(n(7294),n(3905)),o=n(231);const i=n.p+"assets/images/comp-1-4e05c725a183f530979043fe2d3007ef.jpg",s=n.p+"assets/images/comp-2-4c6164e99ab42b744e950cab5cc38347.jpg",l=n.p+"assets/images/comp-3-1baeffb27be6b731d659748165c3e156.jpg",p=n.p+"assets/images/comp-4-a9c207495f33efc7d96a7b26aca65d9e.jpg",u={id:"page-1",title:"Introduction to Computation",sidebar_position:1},c=void 0,m={unversionedId:"turing-tako/intro-to-cs/page-1",id:"turing-tako/intro-to-cs/page-1",title:"Introduction to Computation",description:"Computers are powerful tools that have allowed us to do things that were previously impossible but they can only do what we tell them to do. There are two types of knowledge, declarative and imperative. Declarative knowledge is a statement of facts like square root of a number x is y such that y \\* y = x. However a computer cannot understand this statement, it can only understand instructions (how-to) which is called imperative knowledge. You can give a computer a list of instructions to find the square root of a number, it will not understand the results but it will be able to find the square root of a number with the right instructions.",source:"@site/docs/turing-tako/intro-to-cs/computation.mdx",sourceDirName:"turing-tako/intro-to-cs",slug:"/turing-tako/intro-to-cs/page-1",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/turing-tako/intro-to-cs/computation.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"page-1",title:"Introduction to Computation",sidebar_position:1},sidebar:"turingSidebar",previous:{title:"Networking",permalink:"/NoTako/docs/turing-tako/python-basics/page-7"},next:{title:"Branching and Iteration",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-2"}},d={},g=[{value:"What is a Computer?",id:"what-is-a-computer",level:2},{value:"Basic Machine Architecture",id:"basic-machine-architecture",level:3},{value:"Programs",id:"programs",level:3},{value:"Python",id:"python",level:2},{value:"Output",id:"output",level:3},{value:"Operations",id:"operations",level:3},{value:"Variables",id:"variables",level:3}],h={toc:g};function k(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Computers are powerful tools that have allowed us to do things that were previously impossible but they can only do what we tell them to do. There are two types of knowledge, declarative and imperative. ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Declarative knowledge"))," is a statement of facts like ",(0,r.kt)("strong",{parentName:"p"},"square root of a number x is y such that y ","*"," y = x"),". However a computer cannot understand this statement, it can only understand instructions (how-to) which is called ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"imperative knowledge")),". You can give a computer a list of instructions to find the square root of a number, it will not understand the results but it will be able to find the square root of a number with the right instructions."),(0,r.kt)(o.Z,{src:i,caption:"Modern Computer",num:1,mdxType:"Fig"}),(0,r.kt)("h2",{id:"what-is-a-computer"},"What is a Computer?"),(0,r.kt)("p",null,"Computers can do two things, they can store information and they can process instructions. To be exact the six primative actions that a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"turing complete"))," computer does is..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1. Move right\n2. Move left\n3. Write\n4. Scan \n5. Erase\n6. Do nothing\n")),(0,r.kt)("p",null,"With just these six actions, a computer can both store data and process instructions."),(0,r.kt)("h3",{id:"basic-machine-architecture"},"Basic Machine Architecture"),(0,r.kt)("p",null,"Our computers have specific hardware to do everything it needs to do like dealing with instructions. All instructions are stored in a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"memory"))," before they are executed by the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Control Unit"))," which fetches instructions from the memory and executes them. The memory also stores the data that the instructions are operating on. When the control unit needs calculations done, it sends the data to the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Arithmetic Logic Unit"))," which performs the calculations like addition and multiplication."),(0,r.kt)("p",null,"Most of the time, we want our programs to communicate with the outside world and to do this we need ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"input"))," and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"output"))," devices. Input devices allow us to give the computer data and output devices allow us to get data from the computer."),(0,r.kt)(o.Z,{src:s,caption:"Machine Architecture",num:2,mdxType:"Fig"}),(0,r.kt)("h3",{id:"programs"},"Programs"),(0,r.kt)("p",null,"As programmers we focus on creating these instructions for a computer to follow using programs. A ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"program"))," is a set of instructions and the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"interpreter"))," executes each one of these instructions line by line. Programs interact with two types of computers. ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Fixed program computers"))," hold only one program and can only do one thing like calculators while ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"stored program computers"))," can hold multiple programs and can do multiple things like computers."),(0,r.kt)(o.Z,{src:l,caption:"Fixed Program Computer",num:3,mdxType:"Fig"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Programming languages"))," are what we use to write programs and they are all ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"turing complete"))," languages so anything computable in one of these languages can be computed in any other languages."),(0,r.kt)(o.Z,{src:p,caption:"Popular Programming Languages",num:4,mdxType:"Fig"}),(0,r.kt)("p",null,"Every programming language has a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"syntax"))," which define the structure of the language like grammar in languages like English. The ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"semantics")),' of a programming language define the meaning. With english, a phrase like "bark dogs three" does not have meaning but "three dogs bark" does. One thing to note is that phrases in languages like English can have many meanings but these statements in programming languages have only one meaning and are unambiguous.'),(0,r.kt)("p",null,"Programming languages are able to catch syntax errors really well but not semantic errors. Static semantic errors are errors that can be caught by the compiler while dynamic semantic errors are errors that can only be caught after the program is run. Dynamic semantic errors can include things like unexpected results, infinitely running programs, and crashes."),(0,r.kt)("h2",{id:"python"},"Python"),(0,r.kt)("p",null,"Everything in Python is an ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"object"))," and a Python program manipulates these data objects. Data objects have types that define what you can do to these objects. These types can be broken into two categories. ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Scalar objects"))," cannot be subdivided while ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Non-scalar objects"))," have internal structure that can be accessed. Scalar objects include things like integers (int), floating point numbers (float), boolean (bool), and no value (NoneType). On the other hand, a non-scalar object is a string because you can subdivide a string into characters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Data Objects" showLineNumbers',title:'"Data','Objects"':!0,showLineNumbers:!0},'# Scalar Data Types\n12 # int (whole numbers)\n3.14 # float (decimal numbers)\nTrue # bool (True or False)\nNone # NoneType (no value)\n\n# Non-Scalar Data Types\n"Hello World" # string (characters)\n\n# Use type() to get the type of an object (1)\ntype(12) # int\ntype(3.14) # float\n\n# Casting allows you to convert between types (2)\nint(3.14) # 3\nfloat(12) # 12.0\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"type()")," command returns the type of an object."),(0,r.kt)("li",{parentName:"ol"},"Casting allows you to convert between types if possible, otherwise it will throw an error. The ",(0,r.kt)("inlineCode",{parentName:"li"},"int()")," command converts a data type into an integer and the ",(0,r.kt)("inlineCode",{parentName:"li"},"float()")," command converts a data type into a float.")),(0,r.kt)("h3",{id:"output"},"Output"),(0,r.kt)("p",null,"One of the two ways to interact with the outside world is through a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"output")),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"print()")," command is used to output data to the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"console")),", a text based screen. The ",(0,r.kt)("inlineCode",{parentName:"p"},"print()")," command can also take multiple arguments and will print each argument with a space in between."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Output" showLineNumbers',title:'"Output"',showLineNumbers:!0},'print("Hello World") # Prints Hello World\nprint(12) # 12\nprint(3.14) # 3.14\n\nprint("Hello", "World") # Hello World\nprint(True, False) # True False\n')),(0,r.kt)("p",null,"The output is..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"Hello World\n12\n3.14\nHello World\nTrue False\n")),(0,r.kt)("h3",{id:"operations"},"Operations"),(0,r.kt)("p",null,"Expressions combine objects with operators to create new objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Operations" showLineNumbers',title:'"Operations"',showLineNumbers:!0},"# Addition\nprint(1 + 2) # 3\n\n# Subtraction\nprint(3 - 1) # 2\n\n# Multiplication\nprint(2 * 3) # 6\n\n# Division\nprint(6 / 2) # 3.0\n\n# Exponentiation\nprint(2 ** 3) # 8\n\n# Modulo (Remainder During Division)\nprint(7 % 3) # 1\n")),(0,r.kt)("p",null,"Like in math, the order of operations is followed in Python. The order of operations is..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1. Parentheses\n2. Exponentiation\n3. Multiplication, Division, Modulo\n4. Addition, Subtraction\n")),(0,r.kt)("p",null,"So, ",(0,r.kt)("inlineCode",{parentName:"p"},"2 + 3 * 4")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"20")," because ",(0,r.kt)("inlineCode",{parentName:"p"},"3 * 4")," is done first."),(0,r.kt)("h3",{id:"variables"},"Variables"),(0,r.kt)("p",null,"We can use variables to bind values to names which can give these values meaning."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Variables" showLineNumbers',title:'"Variables"',showLineNumbers:!0},"# Variables are created with the assignment operator\nx = 12\ny = 3.14\n\n# Once created you can use the variable name to refer to the value\nprint(x) # 12\n\n# Variables give values meaning\npi = 3.14\nradius = 5\narea = pi * radius ** 2\nprint(area)\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," operator is used differently from how it is used in math. In math it means two things are equal but in programming it means to assign a value to a variable. For example, in math ",(0,r.kt)("inlineCode",{parentName:"p"},"x = x + 1")," is an invalid statement because this can never be equal but this is a valid statement in programming because it means to assign the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"x + 1")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"x"),". In that way, you are adding 1 to whatever value ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," already was. This also means you can rebind a variable to a new value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Assignment Operator" showLineNumbers',title:'"Assignment','Operator"':!0,showLineNumbers:!0},"x = 1 # x is binded to 1\nx = 3 # x is now rebinded to 3\n\n# x is rebinded to 8 because x was 3 before and 3 + 5 is 8\nx = x + 5\n")),(0,r.kt)("p",null,"Once you rebind a variable, you lose the old value. Once ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," was changed to 3, you could no longer access the value 1."))}k.isMDXComponent=!0}}]);