"use strict";(self.webpackChunknotako=self.webpackChunknotako||[]).push([[3072],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,d=m["".concat(l,".").concat(u)]||m[u]||h[u]||r;return n?a.createElement(d,i(i({ref:t},c),{},{components:n})):a.createElement(d,i({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={id:"page-7",title:"Networking",sidebar_position:7},i=void 0,s={unversionedId:"turing-tako/python-basics/page-7",id:"turing-tako/python-basics/page-7",title:"Networking",description:"There is a limit to how much data we can get on our own and there is lots of data that can be found online for programs to use. Data can come in many forms and can be used for many different purposes.",source:"@site/docs/turing-tako/python-basics/networking.mdx",sourceDirName:"turing-tako/python-basics",slug:"/turing-tako/python-basics/page-7",permalink:"/NoTako/docs/turing-tako/python-basics/page-7",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/turing-tako/python-basics/networking.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"page-7",title:"Networking",sidebar_position:7},sidebar:"turingSidebar",previous:{title:"Objects",permalink:"/NoTako/docs/turing-tako/python-basics/page-6"},next:{title:"Introduction to Computation",permalink:"/NoTako/docs/turing-tako/intro-to-cs/page-1"}},l={},p=[{value:"Data Formats",id:"data-formats",level:2},{value:"XML",id:"xml",level:3},{value:"JSON",id:"json",level:3},{value:"HyperText Transfer Protocol (HTTP)",id:"hypertext-transfer-protocol-http",level:2},{value:"Web Scraping",id:"web-scraping",level:2},{value:"Application Programming Interface (API)",id:"application-programming-interface-api",level:2}],c={toc:p};function h(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There is a limit to how much data we can get on our own and there is lots of data that can be found online for programs to use. Data can come in many forms and can be used for many different purposes."),(0,o.kt)("h2",{id:"data-formats"},"Data Formats"),(0,o.kt)("p",null,"There are two popular data formats that are used in programming: JSON and XML. JSON stands for JavaScript Object Notation and XML stands for Extensible Markup Language. Both of these formats are used to store data in a way that is easy to read and write. XML is the older of the two and is considered more verbose than JSON. JSON is the newer of the two and is considered more concise than XML."),(0,o.kt)("h3",{id:"xml"},"XML"),(0,o.kt)("p",null,"With XML, each pair of opening and closing tag represents an element or node. Each element can have text, atrributes, and other elements inside of it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="XML Example" showLineNumbers',title:'"XML','Example"':!0,showLineNumbers:!0},'<person>\n    <name>Chuck Norris</name>\n    <phone type="intl">\n        +1 734 303 4456\n    </phone>\n    <email hide="yes" />\n</person>\n')),(0,o.kt)("p",null,"You can open the XML file like a regular file and read it as a string in Python because there is an XML module that can parse the string into a tree of elements that helps you navigate the data in Python."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="XML in Python" showLineNumbers',title:'"XML',in:!0,'Python"':!0,showLineNumbers:!0},'# Import needed to parse XML\nimport xml.etree.ElementTree as ET\n\n# Open the XML file and read it into a string\nfile_xml = open("data.xml", "r")\nfile_xml_string = file_xml.read()\nfile_xml.close()\n\n# Parse the XML string into a tree of elements\nroot = ET.fromstring(file_xml_string)\n\n# Find a specific tag\nname = root.find("name")\n\n# Get the text of the tag\nname_text = name.text # Chuck Norris\n\n# Get the attributes of the tag\nphone = root.find("phone")\nphone_type = phone.get("type") # intl\n\n# Find all tags with a specific tag name\nemails = root.findall("email") # List of all email tags\n')),(0,o.kt)("h3",{id:"json"},"JSON"),(0,o.kt)("p",null,"JSON is a more modern and concise way of storing data. Each element is a key-value pair where the value can be a value, an array, or another json object. An array is shown using [] with each element separated by a comma. A json object is shown using {} with each key-value pair separated by a comma."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="JSON Example" showLineNumbers',title:'"JSON','Example"':!0,showLineNumbers:!0},'{\n    "person": {\n        "name": "Chuck Norris",\n        "phone": {\n            "type": "intl",\n            "number": "+1 734 303 4456"\n        },\n        "email": {\n            "hide": "yes"\n        },\n        "sample_array": [1, 2, 3]\n    }\n}\n')),(0,o.kt)("p",null,"As you can see, JSON is very similar to a Python dictionary. We can open the JSON file using the json module but then use the object like a dictionary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="JSON in Python" showLineNumbers',title:'"JSON',in:!0,'Python"':!0,showLineNumbers:!0},'# Import needed to parse JSON\nimport json\n\n# Open the JSON file and read it into a string\nfile_json = open("data.json", "r")\nfile_json_string = file_json.read()\nfile_json.close()\n\n# Parse the JSON string into a dictionary\ndata = json.loads(file_json_string)\n\n# Get the value of a key\nname = data["person"]["name"] # Chuck Norris\n\n# Get the value of a key in an array\nsample_array = data["person"]["sample_array"] # [1, 2, 3]\n\n# Get the value of a key in an array at a specific index\nsample_array_index = data["person"]["sample_array"][0] # 1\n')),(0,o.kt)("p",null,"You can also convert a Python dictionary into a JSON string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Python Dictionary to JSON" showLineNumbers',title:'"Python',Dictionary:!0,to:!0,'JSON"':!0,showLineNumbers:!0},'# Import needed to parse JSON\nimport json\n\n# Create a Python dictionary\ndata = {"people": [\n    {"name": "Chuck Norris", "age": 80},\n    {"name": "Bruce Lee", "age": 32}\n]}\n\n# Convert the dictionary into a JSON string\njson_string = json.dumps(data)\n\n# Writes the JSON string to a file\nfile_json = open("data.json", "w")\nfile_json.write(json_string)\nfile_json.close()\n')),(0,o.kt)("h2",{id:"hypertext-transfer-protocol-http"},"HyperText Transfer Protocol (HTTP)"),(0,o.kt)("p",null,"To make network connections in Python, you need a ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"socket"))," that is a two-way connection between two programs. It lets you send and receive data over the network. A socket needs a protocol to know how to send and receive data. A ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"protocol"))," is a set of rules that determines who sends data, how to deal with the data and even how it should be responded to. One example of a protocol is ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"HTTP"))," which is used to send and receive web pages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="HTTP in Python" showLineNumbers',title:'"HTTP',in:!0,'Python"':!0,showLineNumbers:!0},'# Import to work with sockets\nimport socket\n\n# Create a socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# Connect to a server (host, port) ex. connecting to google.com\'s web server\ns.connect(("www.google.com", 80))\n\n# Send a request to the server (Each HTTP needs to be formatted GET [url] HTTP/1.0)\nrequest = "GET / HTTP/1.1\\r\\nHost: www.google.com\\r\\n\\r\\n"\n\n# All data sent over a socket must be in bytes which is why we encode the string\nrequest_bytes = request.encode()\n\n# Send the request to the server\ns.send(request_bytes)\n\n# Loops until all data is received\nwhile True:\n    # Receive the response from the server (The parameter is the max amount of data you want to receive)\n    response = s.recv(4096)\n\n    # Decode the response from bytes to a string\n    response_string = response.decode()\n\n    # Print the response\n    print(response_string)\n\n    # If there is no more data to receive, break out of the loop\n    if len(response) < 1:\n        break\n\n# Close the connection like you would a file\ns.close()\n')),(0,o.kt)("p",null,"When working with web pages in particular in Python, there is another module that makes it easier to work with HTTP requests and responses. ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Sockets"))," lets you work with any protocol but this one is specifically for HTTP."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="HTTP in Python" showLineNumbers',title:'"HTTP',in:!0,'Python"':!0,showLineNumbers:!0},'# Import to work with HTTP\nimport urllib.request\n\n# Open a connection to a URL\nf = urllib.request.urlopen("http://www.google.com")\n\n# Loop through each line in the response instead of receiving all the data at once incase it is a large response\nfor line in f:\n    # Decode the line from bytes to a string\n    line_string = line.decode()\n\n    # Print the line\n    print(line_string)\n')),(0,o.kt)("h2",{id:"web-scraping"},"Web Scraping"),(0,o.kt)("p",null,"With the earlier methods you are getting data from the webpage completely raw. You can work with that but it is often easier to work with the data in a more structured way. ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Web scraping"))," is the process of extracting data from a webpage and there are tools that make it easier to do so even if the webpage's code is not formatted well. The most popular tool is ",(0,o.kt)("inlineCode",{parentName:"p"},"BeautifulSoup")," which is a Python library that makes it easy to work with HTML."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Web Scraping in Python" showLineNumbers',title:'"Web',Scraping:!0,in:!0,'Python"':!0,showLineNumbers:!0},'# Import to work with HTML\nfrom bs4 import BeautifulSoup\n\n# Open a connection to a URL\nf = urllib.request.urlopen("http://www.google.com")\n\n# Read the response into a string\nresponse = f.read()\n\n# Parse the HTML string into a tree of elements\nsoup = BeautifulSoup(response, "html.parser")\n\n# Find a specific tag\ntitle = soup.find("title")\n\n# Get the text of the tag\ntitle_text = title.text # Google\n\n# Find all tags with a specific tag name\nlinks = soup.findAll("a") # List of all a tags (links in HTML)\n')),(0,o.kt)("h2",{id:"application-programming-interface-api"},"Application Programming Interface (API)"),(0,o.kt)("p",null,"The methods above with networking are taking data from a source that is not really formatted for use. You need that extra layer of code that cleans up the data to be able to use later in the code. There are many websites that give data tat is more structured to be used and it comes in the form of an ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"API")),". The data is typically formatted and the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"API"))," gives you the tools to get the data you need."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="API in Python" showLineNumbers',title:'"API',in:!0,'Python"':!0,showLineNumbers:!0},'# Import to work with JSON (APIs often return JSON)\nimport json\n\n# To get data from an API, you need to make a request to the API\nimport urllib.request, urllib.parse, urllib.error\n\n# This module lets you work with certification issues\nimport ssl\n\n# Ignore SSL certificate errors (Don\'t worry about this for now)\nctx = ssl.create_default_context()\nctx.check_hostname = False\nctx.verify_mode = ssl.CERT_NONE\n\n# Open a connection to the API (This is a free API that gives you the current exchange rate for USD)\nf = urllib.request.urlopen("https://api.exchangerate-api.com/v4/latest/USD", context=ctx)\n\n# Read the response into a string (Remember this is JSON)\nresponse = f.read()\n\n# Parse the JSON string into a dictionary\ndata = json.loads(response)\n\n# Get the value of a key\nrate = data["rates"]["CAD"] # 1.309\n\n# Close the connection like you would a file\nf.close()\n')))}h.isMDXComponent=!0}}]);